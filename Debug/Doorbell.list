
Doorbell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e30  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08004fb8  08004fb8  00005fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c8  080051c8  00007284  2**0
                  CONTENTS
  4 .ARM          00000000  080051c8  080051c8  00007284  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051c8  080051c8  00007284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051c8  080051c8  000061c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051cc  080051cc  000061cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  080051d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007284  2**0
                  CONTENTS
 10 .bss          00002094  20000284  20000284  00007284  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002318  20002318  00007284  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007284  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed45  00000000  00000000  000072b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f51  00000000  00000000  00015ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000da0  00000000  00000000  00017f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aaa  00000000  00000000  00018cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ba2b  00000000  00000000  0001979a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000106d1  00000000  00000000  000351c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a667b  00000000  00000000  00045896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ebf11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d58  00000000  00000000  000ebf54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000efcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000284 	.word	0x20000284
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004fa0 	.word	0x08004fa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000288 	.word	0x20000288
 80001c4:	08004fa0 	.word	0x08004fa0

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2iz>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008ac:	d215      	bcs.n	80008da <__aeabi_d2iz+0x36>
 80008ae:	d511      	bpl.n	80008d4 <__aeabi_d2iz+0x30>
 80008b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d912      	bls.n	80008e0 <__aeabi_d2iz+0x3c>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008ca:	fa23 f002 	lsr.w	r0, r3, r2
 80008ce:	bf18      	it	ne
 80008d0:	4240      	negne	r0, r0
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d105      	bne.n	80008ec <__aeabi_d2iz+0x48>
 80008e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008e4:	bf08      	it	eq
 80008e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008ea:	4770      	bx	lr
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2uiz>:
 80008f4:	004a      	lsls	r2, r1, #1
 80008f6:	d211      	bcs.n	800091c <__aeabi_d2uiz+0x28>
 80008f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008fc:	d211      	bcs.n	8000922 <__aeabi_d2uiz+0x2e>
 80008fe:	d50d      	bpl.n	800091c <__aeabi_d2uiz+0x28>
 8000900:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000904:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000908:	d40e      	bmi.n	8000928 <__aeabi_d2uiz+0x34>
 800090a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000912:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000916:	fa23 f002 	lsr.w	r0, r3, r2
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d102      	bne.n	800092e <__aeabi_d2uiz+0x3a>
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	4770      	bx	lr
 800092e:	f04f 0000 	mov.w	r0, #0
 8000932:	4770      	bx	lr
 8000934:	0000      	movs	r0, r0
	...

08000938 <GenerateNoteWaveform>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to generate the waveform for a single note or pause
void GenerateNoteWaveform(float frequency, uint32_t durationMs, uint16_t* buffer) {
 8000938:	b5b0      	push	{r4, r5, r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000942:	60b8      	str	r0, [r7, #8]
 8000944:	6079      	str	r1, [r7, #4]
    uint32_t numSamples = (SAMPLE_RATE * durationMs) / 1000;
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	f242 7210 	movw	r2, #10000	@ 0x2710
 800094c:	fb02 f303 	mul.w	r3, r2, r3
 8000950:	4a65      	ldr	r2, [pc, #404]	@ (8000ae8 <GenerateNoteWaveform+0x1b0>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	099b      	lsrs	r3, r3, #6
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
    if (numSamples > MAX_SAMPLES) numSamples = MAX_SAMPLES;
 800095a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800095c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000960:	d902      	bls.n	8000968 <GenerateNoteWaveform+0x30>
 8000962:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24

    uint32_t fadeInSamples = numSamples * 5 / 100;  // 5% fade-in
 8000968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800096a:	4613      	mov	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	4a5e      	ldr	r2, [pc, #376]	@ (8000aec <GenerateNoteWaveform+0x1b4>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	61bb      	str	r3, [r7, #24]
    uint32_t fadeOutSamples = numSamples * 40 / 100; // 40% fade-out
 800097a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800097c:	4613      	mov	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	4413      	add	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	461a      	mov	r2, r3
 8000986:	4b59      	ldr	r3, [pc, #356]	@ (8000aec <GenerateNoteWaveform+0x1b4>)
 8000988:	fba3 2302 	umull	r2, r3, r3, r2
 800098c:	095b      	lsrs	r3, r3, #5
 800098e:	617b      	str	r3, [r7, #20]
    uint32_t fadeOutStart = numSamples - fadeOutSamples;
 8000990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	613b      	str	r3, [r7, #16]

    for (uint32_t i = 0; i < numSamples; i++) {
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
 800099c:	e093      	b.n	8000ac6 <GenerateNoteWaveform+0x18e>
        float amplitude = 1.0;
 800099e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80009a2:	61fb      	str	r3, [r7, #28]

        // Fade-in logic
        if (i < fadeInSamples) {
 80009a4:	6a3a      	ldr	r2, [r7, #32]
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d20e      	bcs.n	80009ca <GenerateNoteWaveform+0x92>
            amplitude = (float)i / fadeInSamples;
 80009ac:	6a3b      	ldr	r3, [r7, #32]
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	ee07 3a90 	vmov	s15, r3
 80009bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009c4:	edc7 7a07 	vstr	s15, [r7, #28]
 80009c8:	e013      	b.n	80009f2 <GenerateNoteWaveform+0xba>
        }
        // Fade-out logic
        else if (i >= fadeOutStart) {
 80009ca:	6a3a      	ldr	r2, [r7, #32]
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d30f      	bcc.n	80009f2 <GenerateNoteWaveform+0xba>
            amplitude = (float)(numSamples - i) / fadeOutSamples;
 80009d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	ee07 3a90 	vmov	s15, r3
 80009dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	ee07 3a90 	vmov	s15, r3
 80009e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }

        // Sine wave or silence
        if (frequency > 0) {
 80009f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80009f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80009fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009fe:	dd59      	ble.n	8000ab4 <GenerateNoteWaveform+0x17c>
            buffer[i] = (uint16_t)(DAC_MIDPOINT + (DAC_RESOLUTION / 2) * amplitude * sin(sinePhase));
 8000a00:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a04:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000af0 <GenerateNoteWaveform+0x1b8>
 8000a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a0c:	ee17 0a90 	vmov	r0, s15
 8000a10:	f7ff fe68 	bl	80006e4 <__aeabi_f2d>
 8000a14:	4604      	mov	r4, r0
 8000a16:	460d      	mov	r5, r1
 8000a18:	4b36      	ldr	r3, [pc, #216]	@ (8000af4 <GenerateNoteWaveform+0x1bc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fe61 	bl	80006e4 <__aeabi_f2d>
 8000a22:	4602      	mov	r2, r0
 8000a24:	460b      	mov	r3, r1
 8000a26:	ec43 2b10 	vmov	d0, r2, r3
 8000a2a:	f003 fa89 	bl	8003f40 <sin>
 8000a2e:	ec53 2b10 	vmov	r2, r3, d0
 8000a32:	4620      	mov	r0, r4
 8000a34:	4629      	mov	r1, r5
 8000a36:	f7ff fbc7 	bl	80001c8 <__aeabi_dmul>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	a327      	add	r3, pc, #156	@ (adr r3, 8000ae0 <GenerateNoteWaveform+0x1a8>)
 8000a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a48:	f7ff fcee 	bl	8000428 <__adddf3>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	460b      	mov	r3, r1
 8000a50:	4610      	mov	r0, r2
 8000a52:	4619      	mov	r1, r3
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	18d4      	adds	r4, r2, r3
 8000a5c:	f7ff ff4a 	bl	80008f4 <__aeabi_d2uiz>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	8023      	strh	r3, [r4, #0]
            sinePhase += 2 * PI * frequency / SAMPLE_RATE;
 8000a66:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a6a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000af8 <GenerateNoteWaveform+0x1c0>
 8000a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a72:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8000afc <GenerateNoteWaveform+0x1c4>
 8000a76:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000af4 <GenerateNoteWaveform+0x1bc>)
 8000a7c:	edd3 7a00 	vldr	s15, [r3]
 8000a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a84:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <GenerateNoteWaveform+0x1bc>)
 8000a86:	edc3 7a00 	vstr	s15, [r3]
            if (sinePhase >= 2 * PI) sinePhase -= 2 * PI; // Keep phase continuous
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <GenerateNoteWaveform+0x1bc>)
 8000a8c:	edd3 7a00 	vldr	s15, [r3]
 8000a90:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000af8 <GenerateNoteWaveform+0x1c0>
 8000a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9c:	db10      	blt.n	8000ac0 <GenerateNoteWaveform+0x188>
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <GenerateNoteWaveform+0x1bc>)
 8000aa0:	edd3 7a00 	vldr	s15, [r3]
 8000aa4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000af8 <GenerateNoteWaveform+0x1c0>
 8000aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <GenerateNoteWaveform+0x1bc>)
 8000aae:	edc3 7a00 	vstr	s15, [r3]
 8000ab2:	e005      	b.n	8000ac0 <GenerateNoteWaveform+0x188>
        } else {
            buffer[i] = DAC_MIDPOINT; // Center value for silence
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	4413      	add	r3, r2
 8000abc:	22ff      	movs	r2, #255	@ 0xff
 8000abe:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < numSamples; i++) {
 8000ac0:	6a3b      	ldr	r3, [r7, #32]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
 8000ac6:	6a3a      	ldr	r2, [r7, #32]
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aca:	429a      	cmp	r2, r3
 8000acc:	f4ff af67 	bcc.w	800099e <GenerateNoteWaveform+0x66>
        }
    }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	@ 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8000ada:	bf00      	nop
 8000adc:	f3af 8000 	nop.w
 8000ae0:	00000000 	.word	0x00000000
 8000ae4:	406fe000 	.word	0x406fe000
 8000ae8:	10624dd3 	.word	0x10624dd3
 8000aec:	51eb851f 	.word	0x51eb851f
 8000af0:	437f0000 	.word	0x437f0000
 8000af4:	200021e4 	.word	0x200021e4
 8000af8:	40c90fdb 	.word	0x40c90fdb
 8000afc:	461c4000 	.word	0x461c4000

08000b00 <PlayNote>:

// Start playing a note
void PlayNote(Note currentNote) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	463b      	mov	r3, r7
 8000b08:	e883 0003 	stmia.w	r3, {r0, r1}
    // Start DMA transfer for the current buffer
    uint32_t numSamples = (SAMPLE_RATE * currentNote.durationMs) / 1000;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	4a1c      	ldr	r2, [pc, #112]	@ (8000b88 <PlayNote+0x88>)
 8000b18:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1c:	099b      	lsrs	r3, r3, #6
 8000b1e:	617b      	str	r3, [r7, #20]
    if (numSamples > MAX_SAMPLES) numSamples = MAX_SAMPLES;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b26:	d902      	bls.n	8000b2e <PlayNote+0x2e>
 8000b28:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b2c:	617b      	str	r3, [r7, #20]

    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)currentBuffer, numSamples, DAC_ALIGN_12B_R);
 8000b2e:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <PlayNote+0x8c>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	2300      	movs	r3, #0
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4815      	ldr	r0, [pc, #84]	@ (8000b90 <PlayNote+0x90>)
 8000b3c:	f000 fd50 	bl	80015e0 <HAL_DAC_Start_DMA>

    // Generate waveform for the next note in the background
    Note nextNote = melody[(currentMelodyIndex + 1) % (sizeof(melody) / sizeof(Note))];
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <PlayNote+0x94>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	0853      	lsrs	r3, r2, #1
 8000b48:	4913      	ldr	r1, [pc, #76]	@ (8000b98 <PlayNote+0x98>)
 8000b4a:	fba1 1303 	umull	r1, r3, r1, r3
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	214e      	movs	r1, #78	@ 0x4e
 8000b52:	fb01 f303 	mul.w	r3, r1, r3
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	4910      	ldr	r1, [pc, #64]	@ (8000b9c <PlayNote+0x9c>)
 8000b5a:	f107 020c 	add.w	r2, r7, #12
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	440b      	add	r3, r1
 8000b62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b66:	e882 0003 	stmia.w	r2, {r0, r1}
    GenerateNoteWaveform(nextNote.frequency, nextNote.durationMs, nextBuffer);
 8000b6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	4a0b      	ldr	r2, [pc, #44]	@ (8000ba0 <PlayNote+0xa0>)
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	eeb0 0a67 	vmov.f32	s0, s15
 8000b7c:	f7ff fedc 	bl	8000938 <GenerateNoteWaveform>
}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	10624dd3 	.word	0x10624dd3
 8000b8c:	20000270 	.word	0x20000270
 8000b90:	200021e8 	.word	0x200021e8
 8000b94:	200021e0 	.word	0x200021e0
 8000b98:	d20d20d3 	.word	0xd20d20d3
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000274 	.word	0x20000274

08000ba4 <HAL_DAC_ConvCpltCallbackCh1>:

// DMA completion callback
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
    // Advance to the next note
    currentMelodyIndex++;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <HAL_DAC_ConvCpltCallbackCh1+0x50>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4a10      	ldr	r2, [pc, #64]	@ (8000bf4 <HAL_DAC_ConvCpltCallbackCh1+0x50>)
 8000bb4:	6013      	str	r3, [r2, #0]
    if (currentMelodyIndex >= sizeof(melody) / sizeof(Note)) {
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <HAL_DAC_ConvCpltCallbackCh1+0x50>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b4d      	cmp	r3, #77	@ 0x4d
 8000bbc:	d902      	bls.n	8000bc4 <HAL_DAC_ConvCpltCallbackCh1+0x20>
        currentMelodyIndex = 0; // Loop melody
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <HAL_DAC_ConvCpltCallbackCh1+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
    }

    // Swap buffers
    uint16_t* temp = currentBuffer;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <HAL_DAC_ConvCpltCallbackCh1+0x54>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
    currentBuffer = nextBuffer;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_DAC_ConvCpltCallbackCh1+0x58>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_DAC_ConvCpltCallbackCh1+0x54>)
 8000bd0:	6013      	str	r3, [r2, #0]
    nextBuffer = temp;
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <HAL_DAC_ConvCpltCallbackCh1+0x58>)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	6013      	str	r3, [r2, #0]

    // Play the current note and prepare the next note
    PlayNote(melody[currentMelodyIndex]);
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_DAC_ConvCpltCallbackCh1+0x50>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a08      	ldr	r2, [pc, #32]	@ (8000c00 <HAL_DAC_ConvCpltCallbackCh1+0x5c>)
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	4413      	add	r3, r2
 8000be2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000be6:	f7ff ff8b 	bl	8000b00 <PlayNote>
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200021e0 	.word	0x200021e0
 8000bf8:	20000270 	.word	0x20000270
 8000bfc:	20000274 	.word	0x20000274
 8000c00:	20000000 	.word	0x20000000

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c08:	f000 fb18 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0c:	f000 f834 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c10:	f000 f922 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c14:	f000 f902 	bl	8000e1c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c18:	f000 f8d0 	bl	8000dbc <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000c1c:	f000 f86e 	bl	8000cfc <MX_DAC1_Init>
  MX_TIM6_Init();
 8000c20:	f000 f896 	bl	8000d50 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // Start playing the first note
  PlayNote(melody[currentMelodyIndex]);
 8000c24:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <main+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a10      	ldr	r2, [pc, #64]	@ (8000c6c <main+0x68>)
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c32:	f7ff ff65 	bl	8000b00 <PlayNote>

  // Start the timer to trigger note changes
  // Start the timer to trigger the DAC
  HAL_TIM_Base_Start(&htim6);
 8000c36:	480e      	ldr	r0, [pc, #56]	@ (8000c70 <main+0x6c>)
 8000c38:	f002 fc70 	bl	800351c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(100);
 8000c3c:	2064      	movs	r0, #100	@ 0x64
 8000c3e:	f000 fb63 	bl	8001308 <HAL_Delay>
	  if (!HAL_GPIO_ReadPin(MUSIC_SEL_BTN_GPIO_Port, MUSIC_SEL_BTN_Pin))
 8000c42:	2102      	movs	r1, #2
 8000c44:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <main+0x70>)
 8000c46:	f001 f983 	bl	8001f50 <HAL_GPIO_ReadPin>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d105      	bne.n	8000c5c <main+0x58>
	  {
		  HAL_GPIO_WritePin(AMP_ON_GPIO_Port, AMP_ON_Pin, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2120      	movs	r1, #32
 8000c54:	4807      	ldr	r0, [pc, #28]	@ (8000c74 <main+0x70>)
 8000c56:	f001 f993 	bl	8001f80 <HAL_GPIO_WritePin>
 8000c5a:	e7ef      	b.n	8000c3c <main+0x38>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(AMP_ON_GPIO_Port, AMP_ON_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2120      	movs	r1, #32
 8000c60:	4804      	ldr	r0, [pc, #16]	@ (8000c74 <main+0x70>)
 8000c62:	f001 f98d 	bl	8001f80 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000c66:	e7e9      	b.n	8000c3c <main+0x38>
 8000c68:	200021e0 	.word	0x200021e0
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20002240 	.word	0x20002240
 8000c74:	48000400 	.word	0x48000400

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b090      	sub	sp, #64	@ 0x40
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0318 	add.w	r3, r7, #24
 8000c82:	2228      	movs	r2, #40	@ 0x28
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 f92d 	bl	8003ee6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cae:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb4:	f107 0318 	add.w	r3, r7, #24
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 f979 	bl	8001fb0 <HAL_RCC_OscConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000cc4:	f000 f944 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc8:	230f      	movs	r3, #15
 8000cca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 f9a2 	bl	800302c <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000cee:	f000 f92f 	bl	8000f50 <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3740      	adds	r7, #64	@ 0x40
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_DAC1_Init+0x4c>)
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d4c <MX_DAC1_Init+0x50>)
 8000d10:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <MX_DAC1_Init+0x4c>)
 8000d14:	f000 fc2d 	bl	8001572 <HAL_DAC_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000d1e:	f000 f917 	bl	8000f50 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000d22:	2304      	movs	r3, #4
 8000d24:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_DAC1_Init+0x4c>)
 8000d32:	f000 fd11 	bl	8001758 <HAL_DAC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000d3c:	f000 f908 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200021e8 	.word	0x200021e8
 8000d4c:	40007400 	.word	0x40007400

08000d50 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <MX_TIM6_Init+0x64>)
 8000d62:	4a15      	ldr	r2, [pc, #84]	@ (8000db8 <MX_TIM6_Init+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <MX_TIM6_Init+0x64>)
 8000d68:	223f      	movs	r2, #63	@ 0x3f
 8000d6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_TIM6_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_TIM6_Init+0x64>)
 8000d74:	2263      	movs	r2, #99	@ 0x63
 8000d76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_TIM6_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d7e:	480d      	ldr	r0, [pc, #52]	@ (8000db4 <MX_TIM6_Init+0x64>)
 8000d80:	f002 fb74 	bl	800346c <HAL_TIM_Base_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d8a:	f000 f8e1 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d8e:	2320      	movs	r3, #32
 8000d90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4806      	ldr	r0, [pc, #24]	@ (8000db4 <MX_TIM6_Init+0x64>)
 8000d9c:	f002 fc96 	bl	80036cc <HAL_TIMEx_MasterConfigSynchronization>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000da6:	f000 f8d3 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20002240 	.word	0x20002240
 8000db8:	40001000 	.word	0x40001000

08000dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dc2:	4a15      	ldr	r2, [pc, #84]	@ (8000e18 <MX_USART2_UART_Init+0x5c>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dc8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_USART2_UART_Init+0x58>)
 8000e00:	f002 fcd2 	bl	80037a8 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e0a:	f000 f8a1 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000228c 	.word	0x2000228c
 8000e18:	40004400 	.word	0x40004400

08000e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e22:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <MX_DMA_Init+0x38>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	4a0b      	ldr	r2, [pc, #44]	@ (8000e54 <MX_DMA_Init+0x38>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6153      	str	r3, [r2, #20]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_DMA_Init+0x38>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	200d      	movs	r0, #13
 8000e40:	f000 fb61 	bl	8001506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e44:	200d      	movs	r0, #13
 8000e46:	f000 fb7a 	bl	800153e <HAL_NVIC_EnableIRQ>

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6e:	4b36      	ldr	r3, [pc, #216]	@ (8000f48 <MX_GPIO_Init+0xf0>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	4a35      	ldr	r2, [pc, #212]	@ (8000f48 <MX_GPIO_Init+0xf0>)
 8000e74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e78:	6153      	str	r3, [r2, #20]
 8000e7a:	4b33      	ldr	r3, [pc, #204]	@ (8000f48 <MX_GPIO_Init+0xf0>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b30      	ldr	r3, [pc, #192]	@ (8000f48 <MX_GPIO_Init+0xf0>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f48 <MX_GPIO_Init+0xf0>)
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b2d      	ldr	r3, [pc, #180]	@ (8000f48 <MX_GPIO_Init+0xf0>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f48 <MX_GPIO_Init+0xf0>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a29      	ldr	r2, [pc, #164]	@ (8000f48 <MX_GPIO_Init+0xf0>)
 8000ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <MX_GPIO_Init+0xf0>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CTRL_GPIO_Port, LED_CTRL_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec0:	f001 f85e 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AMP_ON_GPIO_Port, AMP_ON_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2120      	movs	r1, #32
 8000ec8:	4820      	ldr	r0, [pc, #128]	@ (8000f4c <MX_GPIO_Init+0xf4>)
 8000eca:	f001 f859 	bl	8001f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DOOR_BTN_Pin BRIGHTNESS_BTN_Pin VOL_UP_BTN_Pin */
  GPIO_InitStruct.Pin = DOOR_BTN_Pin|BRIGHTNESS_BTN_Pin|VOL_UP_BTN_Pin;
 8000ece:	f241 1301 	movw	r3, #4353	@ 0x1101
 8000ed2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee6:	f000 fec1 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : VOL_DOWN_BTN_Pin MUSIC_SEL_BTN_Pin */
  GPIO_InitStruct.Pin = VOL_DOWN_BTN_Pin|MUSIC_SEL_BTN_Pin;
 8000eea:	2303      	movs	r3, #3
 8000eec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 030c 	add.w	r3, r7, #12
 8000efa:	4619      	mov	r1, r3
 8000efc:	4813      	ldr	r0, [pc, #76]	@ (8000f4c <MX_GPIO_Init+0xf4>)
 8000efe:	f000 feb5 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CTRL_Pin */
  GPIO_InitStruct.Pin = LED_CTRL_Pin;
 8000f02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1e:	f000 fea5 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : AMP_ON_Pin */
  GPIO_InitStruct.Pin = AMP_ON_Pin;
 8000f22:	2320      	movs	r3, #32
 8000f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AMP_ON_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4619      	mov	r1, r3
 8000f38:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <MX_GPIO_Init+0xf4>)
 8000f3a:	f000 fe97 	bl	8001c6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48000400 	.word	0x48000400

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <Error_Handler+0x8>

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <HAL_MspInit+0x44>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <HAL_MspInit+0x44>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <HAL_MspInit+0x44>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <HAL_MspInit+0x44>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a08      	ldr	r2, [pc, #32]	@ (8000fa0 <HAL_MspInit+0x44>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_MspInit+0x44>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8001074 <HAL_DAC_MspInit+0xd0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d152      	bne.n	800106c <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001078 <HAL_DAC_MspInit+0xd4>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a2b      	ldr	r2, [pc, #172]	@ (8001078 <HAL_DAC_MspInit+0xd4>)
 8000fcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <HAL_DAC_MspInit+0xd4>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <HAL_DAC_MspInit+0xd4>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a25      	ldr	r2, [pc, #148]	@ (8001078 <HAL_DAC_MspInit+0xd4>)
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b23      	ldr	r3, [pc, #140]	@ (8001078 <HAL_DAC_MspInit+0xd4>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100c:	f000 fe2e 	bl	8001c6c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001010:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <HAL_DAC_MspInit+0xd8>)
 8001012:	4a1b      	ldr	r2, [pc, #108]	@ (8001080 <HAL_DAC_MspInit+0xdc>)
 8001014:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <HAL_DAC_MspInit+0xd8>)
 8001018:	2210      	movs	r2, #16
 800101a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800101c:	4b17      	ldr	r3, [pc, #92]	@ (800107c <HAL_DAC_MspInit+0xd8>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HAL_DAC_MspInit+0xd8>)
 8001024:	2280      	movs	r2, #128	@ 0x80
 8001026:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001028:	4b14      	ldr	r3, [pc, #80]	@ (800107c <HAL_DAC_MspInit+0xd8>)
 800102a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800102e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <HAL_DAC_MspInit+0xd8>)
 8001032:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001036:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8001038:	4b10      	ldr	r3, [pc, #64]	@ (800107c <HAL_DAC_MspInit+0xd8>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <HAL_DAC_MspInit+0xd8>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001044:	480d      	ldr	r0, [pc, #52]	@ (800107c <HAL_DAC_MspInit+0xd8>)
 8001046:	f000 fc79 	bl	800193c <HAL_DMA_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8001050:	f7ff ff7e 	bl	8000f50 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <HAL_DAC_MspInit+0xe0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <HAL_DAC_MspInit+0xe0>)
 800105a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800105e:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a06      	ldr	r2, [pc, #24]	@ (800107c <HAL_DAC_MspInit+0xd8>)
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <HAL_DAC_MspInit+0xd8>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	@ 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40007400 	.word	0x40007400
 8001078:	40021000 	.word	0x40021000
 800107c:	200021fc 	.word	0x200021fc
 8001080:	40020030 	.word	0x40020030
 8001084:	40010000 	.word	0x40010000

08001088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <HAL_TIM_Base_MspInit+0x38>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d10b      	bne.n	80010b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <HAL_TIM_Base_MspInit+0x3c>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <HAL_TIM_Base_MspInit+0x3c>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <HAL_TIM_Base_MspInit+0x3c>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40001000 	.word	0x40001000
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	@ 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a18      	ldr	r2, [pc, #96]	@ (8001148 <HAL_UART_MspInit+0x80>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d129      	bne.n	800113e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ea:	4b18      	ldr	r3, [pc, #96]	@ (800114c <HAL_UART_MspInit+0x84>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a17      	ldr	r2, [pc, #92]	@ (800114c <HAL_UART_MspInit+0x84>)
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <HAL_UART_MspInit+0x84>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b12      	ldr	r3, [pc, #72]	@ (800114c <HAL_UART_MspInit+0x84>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	4a11      	ldr	r2, [pc, #68]	@ (800114c <HAL_UART_MspInit+0x84>)
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	6153      	str	r3, [r2, #20]
 800110e:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <HAL_UART_MspInit+0x84>)
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800111a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800112c:	2307      	movs	r3, #7
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800113a:	f000 fd97 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	@ 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40004400 	.word	0x40004400
 800114c:	40021000 	.word	0x40021000

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <NMI_Handler+0x4>

08001158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <MemManage_Handler+0x4>

08001168 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <UsageFault_Handler+0x4>

08001178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a6:	f000 f88f 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80011b4:	4802      	ldr	r0, [pc, #8]	@ (80011c0 <DMA1_Channel3_IRQHandler+0x10>)
 80011b6:	f000 fc67 	bl	8001a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200021fc 	.word	0x200021fc

080011c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001220 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ec:	f7ff ffea 	bl	80011c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	@ (8001228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <LoopForever+0xe>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	@ (8001234 <LoopForever+0x16>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f002 fe6f 	bl	8003ef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121a:	f7ff fcf3 	bl	8000c04 <main>

0800121e <LoopForever>:

LoopForever:
    b LoopForever
 800121e:	e7fe      	b.n	800121e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001220:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 800122c:	080051d0 	.word	0x080051d0
  ldr r2, =_sbss
 8001230:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 8001234:	20002318 	.word	0x20002318

08001238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_2_IRQHandler>
	...

0800123c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <HAL_Init+0x28>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	@ (8001264 <HAL_Init+0x28>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 f94f 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	2000      	movs	r0, #0
 8001254:	f000 f808 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff fe80 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40022000 	.word	0x40022000

08001268 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_InitTick+0x54>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_InitTick+0x58>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f967 	bl	800155a <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 f92f 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <HAL_InitTick+0x5c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000278 	.word	0x20000278
 80012c0:	20000280 	.word	0x20000280
 80012c4:	2000027c 	.word	0x2000027c

080012c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000280 	.word	0x20000280
 80012ec:	20002314 	.word	0x20002314

080012f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20002314 	.word	0x20002314

08001308 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff ffee 	bl	80012f0 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffde 	bl	80012f0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000280 	.word	0x20000280

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4907      	ldr	r1, [pc, #28]	@ (80013ec <__NVIC_EnableIRQ+0x38>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	@ (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	@ (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	@ 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff29 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff3e 	bl	8001398 <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff8e 	bl	8001444 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff31 	bl	80013b4 <__NVIC_EnableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffa2 	bl	80014ac <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e014      	b.n	80015ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	791b      	ldrb	r3, [r3, #4]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d105      	bne.n	800159a <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fd05 	bl	8000fa4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2202      	movs	r2, #2
 800159e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	795b      	ldrb	r3, [r3, #5]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_DAC_Start_DMA+0x1e>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e09b      	b.n	8001736 <HAL_DAC_Start_DMA+0x156>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2202      	movs	r2, #2
 8001608:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d12f      	bne.n	8001670 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a4a      	ldr	r2, [pc, #296]	@ (8001740 <HAL_DAC_Start_DMA+0x160>)
 8001616:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a49      	ldr	r2, [pc, #292]	@ (8001744 <HAL_DAC_Start_DMA+0x164>)
 800161e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	4a48      	ldr	r2, [pc, #288]	@ (8001748 <HAL_DAC_Start_DMA+0x168>)
 8001626:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001636:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	2b08      	cmp	r3, #8
 800163c:	d013      	beq.n	8001666 <HAL_DAC_Start_DMA+0x86>
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d845      	bhi.n	80016d0 <HAL_DAC_Start_DMA+0xf0>
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_DAC_Start_DMA+0x72>
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	2b04      	cmp	r3, #4
 800164e:	d005      	beq.n	800165c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001650:	e03e      	b.n	80016d0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3308      	adds	r3, #8
 8001658:	617b      	str	r3, [r7, #20]
        break;
 800165a:	e03c      	b.n	80016d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	330c      	adds	r3, #12
 8001662:	617b      	str	r3, [r7, #20]
        break;
 8001664:	e037      	b.n	80016d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3310      	adds	r3, #16
 800166c:	617b      	str	r3, [r7, #20]
        break;
 800166e:	e032      	b.n	80016d6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4a35      	ldr	r2, [pc, #212]	@ (800174c <HAL_DAC_Start_DMA+0x16c>)
 8001676:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4a34      	ldr	r2, [pc, #208]	@ (8001750 <HAL_DAC_Start_DMA+0x170>)
 800167e:	62da      	str	r2, [r3, #44]	@ 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4a33      	ldr	r2, [pc, #204]	@ (8001754 <HAL_DAC_Start_DMA+0x174>)
 8001686:	631a      	str	r2, [r3, #48]	@ 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001696:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	2b08      	cmp	r3, #8
 800169c:	d013      	beq.n	80016c6 <HAL_DAC_Start_DMA+0xe6>
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d817      	bhi.n	80016d4 <HAL_DAC_Start_DMA+0xf4>
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_DAC_Start_DMA+0xd2>
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d005      	beq.n	80016bc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80016b0:	e010      	b.n	80016d4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	3314      	adds	r3, #20
 80016b8:	617b      	str	r3, [r7, #20]
        break;
 80016ba:	e00c      	b.n	80016d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3318      	adds	r3, #24
 80016c2:	617b      	str	r3, [r7, #20]
        break;
 80016c4:	e007      	b.n	80016d6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	331c      	adds	r3, #28
 80016cc:	617b      	str	r3, [r7, #20]
        break;
 80016ce:	e002      	b.n	80016d6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80016d0:	bf00      	nop
 80016d2:	e000      	b.n	80016d6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80016d4:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10f      	bne.n	80016fc <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80016ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6898      	ldr	r0, [r3, #8]
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	f000 f968 	bl	80019ca <HAL_DMA_Start_IT>
 80016fa:	e00e      	b.n	800171a <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800170a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	68d8      	ldr	r0, [r3, #12]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	f000 f958 	bl	80019ca <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6819      	ldr	r1, [r3, #0]
 8001726:	2201      	movs	r2, #1
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	409a      	lsls	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	08001865 	.word	0x08001865
 8001744:	08001887 	.word	0x08001887
 8001748:	080018a3 	.word	0x080018a3
 800174c:	080018d1 	.word	0x080018d1
 8001750:	080018f3 	.word	0x080018f3
 8001754:	0800190f 	.word	0x0800190f

08001758 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	795b      	ldrb	r3, [r3, #5]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <HAL_DAC_ConfigChannel+0x20>
 8001774:	2302      	movs	r3, #2
 8001776:	e04e      	b.n	8001816 <HAL_DAC_ConfigChannel+0xbe>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2201      	movs	r2, #1
 800177c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2202      	movs	r2, #2
 8001782:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a24      	ldr	r2, [pc, #144]	@ (8001824 <HAL_DAC_ConfigChannel+0xcc>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d112      	bne.n	80017bc <HAL_DAC_ConfigChannel+0x64>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10f      	bne.n	80017bc <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800179c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	4013      	ands	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	e00e      	b.n	80017da <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 80017bc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	4013      	ands	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	22c0      	movs	r2, #192	@ 0xc0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	400a      	ands	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2201      	movs	r2, #1
 800180c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40007400 	.word	0x40007400

08001828 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f7ff f996 	bl	8000ba4 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	711a      	strb	r2, [r3, #4]
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff fe8e 	bl	80015b6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ae:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	f043 0204 	orr.w	r2, r3, #4
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff fe84 	bl	80015ca <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	711a      	strb	r2, [r3, #4]
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f7ff ffa2 	bl	8001828 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2201      	movs	r2, #1
 80018e8:	711a      	strb	r2, [r3, #4]
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f7ff ff9b 	bl	800183c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b084      	sub	sp, #16
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191a:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f043 0204 	orr.w	r2, r3, #4
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f7ff ff91 	bl	8001850 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	711a      	strb	r2, [r3, #4]
}
 8001934:	bf00      	nop
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e037      	b.n	80019c2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2202      	movs	r2, #2
 8001956:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001968:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800196c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001976:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001982:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f941 	bl	8001c2c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_DMA_Start_IT+0x20>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e04a      	b.n	8001a80 <HAL_DMA_Start_IT+0xb6>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d13a      	bne.n	8001a72 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0201 	bic.w	r2, r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	68b9      	ldr	r1, [r7, #8]
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 f8d4 	bl	8001bce <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 020e 	orr.w	r2, r2, #14
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e00f      	b.n	8001a60 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 020a 	orr.w	r2, r2, #10
 8001a4e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0204 	bic.w	r2, r2, #4
 8001a5e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e005      	b.n	8001a7e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d024      	beq.n	8001afa <HAL_DMA_IRQHandler+0x72>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01f      	beq.n	8001afa <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d107      	bne.n	8001ad8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d06a      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001af8:	e065      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	2202      	movs	r2, #2
 8001b00:	409a      	lsls	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d02c      	beq.n	8001b64 <HAL_DMA_IRQHandler+0xdc>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d027      	beq.n	8001b64 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10b      	bne.n	8001b3a <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 020a 	bic.w	r2, r2, #10
 8001b30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b42:	2102      	movs	r1, #2
 8001b44:	fa01 f202 	lsl.w	r2, r1, r2
 8001b48:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d035      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b62:	e030      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	2208      	movs	r2, #8
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d028      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x13e>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d023      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 020e 	bic.w	r2, r2, #14
 8001b8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b96:	2101      	movs	r1, #1
 8001b98:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
    }
  }
}
 8001bc4:	e7ff      	b.n	8001bc6 <HAL_DMA_IRQHandler+0x13e>
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bea:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d108      	bne.n	8001c0e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c0c:	e007      	b.n	8001c1e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	60da      	str	r2, [r3, #12]
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <DMA_CalcBaseAndBitshift+0x34>)
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a09      	ldr	r2, [pc, #36]	@ (8001c64 <DMA_CalcBaseAndBitshift+0x38>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	009a      	lsls	r2, r3, #2
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a06      	ldr	r2, [pc, #24]	@ (8001c68 <DMA_CalcBaseAndBitshift+0x3c>)
 8001c50:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	bffdfff8 	.word	0xbffdfff8
 8001c64:	cccccccd 	.word	0xcccccccd
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7a:	e14e      	b.n	8001f1a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2101      	movs	r1, #1
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8140 	beq.w	8001f14 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d005      	beq.n	8001cac <HAL_GPIO_Init+0x40>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d130      	bne.n	8001d0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 0201 	and.w	r2, r3, #1
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d017      	beq.n	8001d4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d123      	bne.n	8001d9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	08da      	lsrs	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3208      	adds	r2, #8
 8001d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	220f      	movs	r2, #15
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	691a      	ldr	r2, [r3, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	6939      	ldr	r1, [r7, #16]
 8001d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0203 	and.w	r2, r3, #3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 809a 	beq.w	8001f14 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de0:	4b55      	ldr	r3, [pc, #340]	@ (8001f38 <HAL_GPIO_Init+0x2cc>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a54      	ldr	r2, [pc, #336]	@ (8001f38 <HAL_GPIO_Init+0x2cc>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b52      	ldr	r3, [pc, #328]	@ (8001f38 <HAL_GPIO_Init+0x2cc>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001df8:	4a50      	ldr	r2, [pc, #320]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e22:	d013      	beq.n	8001e4c <HAL_GPIO_Init+0x1e0>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a46      	ldr	r2, [pc, #280]	@ (8001f40 <HAL_GPIO_Init+0x2d4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00d      	beq.n	8001e48 <HAL_GPIO_Init+0x1dc>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a45      	ldr	r2, [pc, #276]	@ (8001f44 <HAL_GPIO_Init+0x2d8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d007      	beq.n	8001e44 <HAL_GPIO_Init+0x1d8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a44      	ldr	r2, [pc, #272]	@ (8001f48 <HAL_GPIO_Init+0x2dc>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_GPIO_Init+0x1d4>
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e006      	b.n	8001e4e <HAL_GPIO_Init+0x1e2>
 8001e40:	2305      	movs	r3, #5
 8001e42:	e004      	b.n	8001e4e <HAL_GPIO_Init+0x1e2>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e002      	b.n	8001e4e <HAL_GPIO_Init+0x1e2>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_GPIO_Init+0x1e2>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	f002 0203 	and.w	r2, r2, #3
 8001e54:	0092      	lsls	r2, r2, #2
 8001e56:	4093      	lsls	r3, r2
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e5e:	4937      	ldr	r1, [pc, #220]	@ (8001f3c <HAL_GPIO_Init+0x2d0>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e6c:	4b37      	ldr	r3, [pc, #220]	@ (8001f4c <HAL_GPIO_Init+0x2e0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e90:	4a2e      	ldr	r2, [pc, #184]	@ (8001f4c <HAL_GPIO_Init+0x2e0>)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e96:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <HAL_GPIO_Init+0x2e0>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001eba:	4a24      	ldr	r2, [pc, #144]	@ (8001f4c <HAL_GPIO_Init+0x2e0>)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ec0:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <HAL_GPIO_Init+0x2e0>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ee4:	4a19      	ldr	r2, [pc, #100]	@ (8001f4c <HAL_GPIO_Init+0x2e0>)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <HAL_GPIO_Init+0x2e0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f4c <HAL_GPIO_Init+0x2e0>)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	3301      	adds	r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f47f aea9 	bne.w	8001c7c <HAL_GPIO_Init+0x10>
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	bf00      	nop
 8001f2e:	371c      	adds	r7, #28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	48000400 	.word	0x48000400
 8001f44:	48000800 	.word	0x48000800
 8001f48:	48000c00 	.word	0x48000c00
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	887b      	ldrh	r3, [r7, #2]
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e001      	b.n	8001f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fc0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f001 b823 	b.w	800301c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 817d 	beq.w	80022e6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fec:	4bbc      	ldr	r3, [pc, #752]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d00c      	beq.n	8002012 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff8:	4bb9      	ldr	r3, [pc, #740]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d15c      	bne.n	80020be <HAL_RCC_OscConfig+0x10e>
 8002004:	4bb6      	ldr	r3, [pc, #728]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002010:	d155      	bne.n	80020be <HAL_RCC_OscConfig+0x10e>
 8002012:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002016:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002026:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d102      	bne.n	8002044 <HAL_RCC_OscConfig+0x94>
 800203e:	4ba8      	ldr	r3, [pc, #672]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	e015      	b.n	8002070 <HAL_RCC_OscConfig+0xc0>
 8002044:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002048:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002058:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800205c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002060:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002064:	fa93 f3a3 	rbit	r3, r3
 8002068:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800206c:	4b9c      	ldr	r3, [pc, #624]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002074:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002078:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800207c:	fa92 f2a2 	rbit	r2, r2
 8002080:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002084:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002088:	fab2 f282 	clz	r2, r2
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	f042 0220 	orr.w	r2, r2, #32
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	f002 021f 	and.w	r2, r2, #31
 8002098:	2101      	movs	r1, #1
 800209a:	fa01 f202 	lsl.w	r2, r1, r2
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 811f 	beq.w	80022e4 <HAL_RCC_OscConfig+0x334>
 80020a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 8116 	bne.w	80022e4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f000 bfaf 	b.w	800301c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ce:	d106      	bne.n	80020de <HAL_RCC_OscConfig+0x12e>
 80020d0:	4b83      	ldr	r3, [pc, #524]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a82      	ldr	r2, [pc, #520]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 80020d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	e036      	b.n	800214c <HAL_RCC_OscConfig+0x19c>
 80020de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x158>
 80020ee:	4b7c      	ldr	r3, [pc, #496]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a7b      	ldr	r2, [pc, #492]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 80020f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b79      	ldr	r3, [pc, #484]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a78      	ldr	r2, [pc, #480]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 8002100:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e021      	b.n	800214c <HAL_RCC_OscConfig+0x19c>
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x184>
 800211a:	4b71      	ldr	r3, [pc, #452]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a70      	ldr	r2, [pc, #448]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b6e      	ldr	r3, [pc, #440]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a6d      	ldr	r2, [pc, #436]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0x19c>
 8002134:	4b6a      	ldr	r3, [pc, #424]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a69      	ldr	r2, [pc, #420]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 800213a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b67      	ldr	r3, [pc, #412]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a66      	ldr	r2, [pc, #408]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800214a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800214c:	4b64      	ldr	r3, [pc, #400]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	f023 020f 	bic.w	r2, r3, #15
 8002154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002158:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	495f      	ldr	r1, [pc, #380]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 8002162:	4313      	orrs	r3, r2
 8002164:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d059      	beq.n	800222a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7ff f8bb 	bl	80012f0 <HAL_GetTick>
 800217a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002180:	f7ff f8b6 	bl	80012f0 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b64      	cmp	r3, #100	@ 0x64
 800218e:	d902      	bls.n	8002196 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	f000 bf43 	b.w	800301c <HAL_RCC_OscConfig+0x106c>
 8002196:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800219a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80021aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d102      	bne.n	80021c8 <HAL_RCC_OscConfig+0x218>
 80021c2:	4b47      	ldr	r3, [pc, #284]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	e015      	b.n	80021f4 <HAL_RCC_OscConfig+0x244>
 80021c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021cc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80021dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021e0:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80021e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80021f0:	4b3b      	ldr	r3, [pc, #236]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021f8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80021fc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002200:	fa92 f2a2 	rbit	r2, r2
 8002204:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002208:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800220c:	fab2 f282 	clz	r2, r2
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f042 0220 	orr.w	r2, r2, #32
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	f002 021f 	and.w	r2, r2, #31
 800221c:	2101      	movs	r1, #1
 800221e:	fa01 f202 	lsl.w	r2, r1, r2
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0ab      	beq.n	8002180 <HAL_RCC_OscConfig+0x1d0>
 8002228:	e05d      	b.n	80022e6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7ff f861 	bl	80012f0 <HAL_GetTick>
 800222e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002234:	f7ff f85c 	bl	80012f0 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b64      	cmp	r3, #100	@ 0x64
 8002242:	d902      	bls.n	800224a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	f000 bee9 	b.w	800301c <HAL_RCC_OscConfig+0x106c>
 800224a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800224e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800225e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b01      	cmp	r3, #1
 8002274:	d102      	bne.n	800227c <HAL_RCC_OscConfig+0x2cc>
 8002276:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	e015      	b.n	80022a8 <HAL_RCC_OscConfig+0x2f8>
 800227c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002280:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002290:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002294:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002298:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80022a4:	4b0e      	ldr	r3, [pc, #56]	@ (80022e0 <HAL_RCC_OscConfig+0x330>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022ac:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80022b0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80022b4:	fa92 f2a2 	rbit	r2, r2
 80022b8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80022bc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80022c0:	fab2 f282 	clz	r2, r2
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	f042 0220 	orr.w	r2, r2, #32
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	f002 021f 	and.w	r2, r2, #31
 80022d0:	2101      	movs	r1, #1
 80022d2:	fa01 f202 	lsl.w	r2, r1, r2
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1ab      	bne.n	8002234 <HAL_RCC_OscConfig+0x284>
 80022dc:	e003      	b.n	80022e6 <HAL_RCC_OscConfig+0x336>
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 817d 	beq.w	80025f6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022fc:	4ba6      	ldr	r3, [pc, #664]	@ (8002598 <HAL_RCC_OscConfig+0x5e8>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00b      	beq.n	8002320 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002308:	4ba3      	ldr	r3, [pc, #652]	@ (8002598 <HAL_RCC_OscConfig+0x5e8>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d172      	bne.n	80023fa <HAL_RCC_OscConfig+0x44a>
 8002314:	4ba0      	ldr	r3, [pc, #640]	@ (8002598 <HAL_RCC_OscConfig+0x5e8>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d16c      	bne.n	80023fa <HAL_RCC_OscConfig+0x44a>
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002332:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d102      	bne.n	8002350 <HAL_RCC_OscConfig+0x3a0>
 800234a:	4b93      	ldr	r3, [pc, #588]	@ (8002598 <HAL_RCC_OscConfig+0x5e8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	e013      	b.n	8002378 <HAL_RCC_OscConfig+0x3c8>
 8002350:	2302      	movs	r3, #2
 8002352:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002362:	2302      	movs	r3, #2
 8002364:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002368:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002374:	4b88      	ldr	r3, [pc, #544]	@ (8002598 <HAL_RCC_OscConfig+0x5e8>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	2202      	movs	r2, #2
 800237a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800237e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002382:	fa92 f2a2 	rbit	r2, r2
 8002386:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800238a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800238e:	fab2 f282 	clz	r2, r2
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	f042 0220 	orr.w	r2, r2, #32
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f002 021f 	and.w	r2, r2, #31
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f202 	lsl.w	r2, r1, r2
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCC_OscConfig+0x410>
 80023aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d002      	beq.n	80023c0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f000 be2e 	b.w	800301c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b75      	ldr	r3, [pc, #468]	@ (8002598 <HAL_RCC_OscConfig+0x5e8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	21f8      	movs	r1, #248	@ 0xf8
 80023d6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80023de:	fa91 f1a1 	rbit	r1, r1
 80023e2:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80023e6:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80023ea:	fab1 f181 	clz	r1, r1
 80023ee:	b2c9      	uxtb	r1, r1
 80023f0:	408b      	lsls	r3, r1
 80023f2:	4969      	ldr	r1, [pc, #420]	@ (8002598 <HAL_RCC_OscConfig+0x5e8>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f8:	e0fd      	b.n	80025f6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8088 	beq.w	800251c <HAL_RCC_OscConfig+0x56c>
 800240c:	2301      	movs	r3, #1
 800240e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800241e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800242c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	461a      	mov	r2, r3
 8002434:	2301      	movs	r3, #1
 8002436:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7fe ff5a 	bl	80012f0 <HAL_GetTick>
 800243c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	e00a      	b.n	8002458 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002442:	f7fe ff55 	bl	80012f0 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d902      	bls.n	8002458 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	f000 bde2 	b.w	800301c <HAL_RCC_OscConfig+0x106c>
 8002458:	2302      	movs	r3, #2
 800245a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800246a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b01      	cmp	r3, #1
 8002480:	d102      	bne.n	8002488 <HAL_RCC_OscConfig+0x4d8>
 8002482:	4b45      	ldr	r3, [pc, #276]	@ (8002598 <HAL_RCC_OscConfig+0x5e8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	e013      	b.n	80024b0 <HAL_RCC_OscConfig+0x500>
 8002488:	2302      	movs	r3, #2
 800248a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800249a:	2302      	movs	r3, #2
 800249c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80024a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80024ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002598 <HAL_RCC_OscConfig+0x5e8>)
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	2202      	movs	r2, #2
 80024b2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80024b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80024ba:	fa92 f2a2 	rbit	r2, r2
 80024be:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80024c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80024c6:	fab2 f282 	clz	r2, r2
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	f042 0220 	orr.w	r2, r2, #32
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	f002 021f 	and.w	r2, r2, #31
 80024d6:	2101      	movs	r1, #1
 80024d8:	fa01 f202 	lsl.w	r2, r1, r2
 80024dc:	4013      	ands	r3, r2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0af      	beq.n	8002442 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002598 <HAL_RCC_OscConfig+0x5e8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	21f8      	movs	r1, #248	@ 0xf8
 80024f8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002500:	fa91 f1a1 	rbit	r1, r1
 8002504:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002508:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800250c:	fab1 f181 	clz	r1, r1
 8002510:	b2c9      	uxtb	r1, r1
 8002512:	408b      	lsls	r3, r1
 8002514:	4920      	ldr	r1, [pc, #128]	@ (8002598 <HAL_RCC_OscConfig+0x5e8>)
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]
 800251a:	e06c      	b.n	80025f6 <HAL_RCC_OscConfig+0x646>
 800251c:	2301      	movs	r3, #1
 800251e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800252e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	fab3 f383 	clz	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800253c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	461a      	mov	r2, r3
 8002544:	2300      	movs	r3, #0
 8002546:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe fed2 	bl	80012f0 <HAL_GetTick>
 800254c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002552:	f7fe fecd 	bl	80012f0 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d902      	bls.n	8002568 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	f000 bd5a 	b.w	800301c <HAL_RCC_OscConfig+0x106c>
 8002568:	2302      	movs	r3, #2
 800256a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800257a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d104      	bne.n	800259c <HAL_RCC_OscConfig+0x5ec>
 8002592:	4b01      	ldr	r3, [pc, #4]	@ (8002598 <HAL_RCC_OscConfig+0x5e8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	e015      	b.n	80025c4 <HAL_RCC_OscConfig+0x614>
 8002598:	40021000 	.word	0x40021000
 800259c:	2302      	movs	r3, #2
 800259e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80025ae:	2302      	movs	r3, #2
 80025b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80025b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80025c0:	4bc8      	ldr	r3, [pc, #800]	@ (80028e4 <HAL_RCC_OscConfig+0x934>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	2202      	movs	r2, #2
 80025c6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80025ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80025ce:	fa92 f2a2 	rbit	r2, r2
 80025d2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80025d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80025da:	fab2 f282 	clz	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f002 021f 	and.w	r2, r2, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ad      	bne.n	8002552 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8110 	beq.w	800282c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002610:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d079      	beq.n	8002710 <HAL_RCC_OscConfig+0x760>
 800261c:	2301      	movs	r3, #1
 800261e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800262e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	4bab      	ldr	r3, [pc, #684]	@ (80028e8 <HAL_RCC_OscConfig+0x938>)
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	461a      	mov	r2, r3
 8002642:	2301      	movs	r3, #1
 8002644:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002646:	f7fe fe53 	bl	80012f0 <HAL_GetTick>
 800264a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	e00a      	b.n	8002666 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002650:	f7fe fe4e 	bl	80012f0 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d902      	bls.n	8002666 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	f000 bcdb 	b.w	800301c <HAL_RCC_OscConfig+0x106c>
 8002666:	2302      	movs	r3, #2
 8002668:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002680:	2202      	movs	r2, #2
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002688:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	fa93 f2a3 	rbit	r2, r3
 8002692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026a4:	2202      	movs	r2, #2
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	fa93 f2a3 	rbit	r2, r3
 80026b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c0:	4b88      	ldr	r3, [pc, #544]	@ (80028e4 <HAL_RCC_OscConfig+0x934>)
 80026c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026cc:	2102      	movs	r1, #2
 80026ce:	6019      	str	r1, [r3, #0]
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f1a3 	rbit	r1, r3
 80026de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026e6:	6019      	str	r1, [r3, #0]
  return result;
 80026e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ec:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	2101      	movs	r1, #1
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0a0      	beq.n	8002650 <HAL_RCC_OscConfig+0x6a0>
 800270e:	e08d      	b.n	800282c <HAL_RCC_OscConfig+0x87c>
 8002710:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002714:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002720:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	fa93 f2a3 	rbit	r2, r3
 800272a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002732:	601a      	str	r2, [r3, #0]
  return result;
 8002734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002738:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800273c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	4b68      	ldr	r3, [pc, #416]	@ (80028e8 <HAL_RCC_OscConfig+0x938>)
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	461a      	mov	r2, r3
 800274e:	2300      	movs	r3, #0
 8002750:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002752:	f7fe fdcd 	bl	80012f0 <HAL_GetTick>
 8002756:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275c:	f7fe fdc8 	bl	80012f0 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d902      	bls.n	8002772 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	f000 bc55 	b.w	800301c <HAL_RCC_OscConfig+0x106c>
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800277a:	2202      	movs	r2, #2
 800277c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002790:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800279e:	2202      	movs	r2, #2
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f2a3 	rbit	r2, r3
 80027b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027c2:	2202      	movs	r2, #2
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	fa93 f2a3 	rbit	r2, r3
 80027d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027de:	4b41      	ldr	r3, [pc, #260]	@ (80028e4 <HAL_RCC_OscConfig+0x934>)
 80027e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027ea:	2102      	movs	r1, #2
 80027ec:	6019      	str	r1, [r3, #0]
 80027ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	fa93 f1a3 	rbit	r1, r3
 80027fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002800:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002804:	6019      	str	r1, [r3, #0]
  return result;
 8002806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800280a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d197      	bne.n	800275c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002830:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 81a1 	beq.w	8002b84 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002848:	4b26      	ldr	r3, [pc, #152]	@ (80028e4 <HAL_RCC_OscConfig+0x934>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d116      	bne.n	8002882 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002854:	4b23      	ldr	r3, [pc, #140]	@ (80028e4 <HAL_RCC_OscConfig+0x934>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4a22      	ldr	r2, [pc, #136]	@ (80028e4 <HAL_RCC_OscConfig+0x934>)
 800285a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285e:	61d3      	str	r3, [r2, #28]
 8002860:	4b20      	ldr	r3, [pc, #128]	@ (80028e4 <HAL_RCC_OscConfig+0x934>)
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002876:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800287a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800287c:	2301      	movs	r3, #1
 800287e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	4b1a      	ldr	r3, [pc, #104]	@ (80028ec <HAL_RCC_OscConfig+0x93c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d11a      	bne.n	80028c4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288e:	4b17      	ldr	r3, [pc, #92]	@ (80028ec <HAL_RCC_OscConfig+0x93c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a16      	ldr	r2, [pc, #88]	@ (80028ec <HAL_RCC_OscConfig+0x93c>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002898:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289a:	f7fe fd29 	bl	80012f0 <HAL_GetTick>
 800289e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	e009      	b.n	80028b8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a4:	f7fe fd24 	bl	80012f0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b64      	cmp	r3, #100	@ 0x64
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e3b1      	b.n	800301c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <HAL_RCC_OscConfig+0x93c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0ef      	beq.n	80028a4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d10d      	bne.n	80028f0 <HAL_RCC_OscConfig+0x940>
 80028d4:	4b03      	ldr	r3, [pc, #12]	@ (80028e4 <HAL_RCC_OscConfig+0x934>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4a02      	ldr	r2, [pc, #8]	@ (80028e4 <HAL_RCC_OscConfig+0x934>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6213      	str	r3, [r2, #32]
 80028e0:	e03c      	b.n	800295c <HAL_RCC_OscConfig+0x9ac>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	10908120 	.word	0x10908120
 80028ec:	40007000 	.word	0x40007000
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10c      	bne.n	800291a <HAL_RCC_OscConfig+0x96a>
 8002900:	4bc1      	ldr	r3, [pc, #772]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4ac0      	ldr	r2, [pc, #768]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	6213      	str	r3, [r2, #32]
 800290c:	4bbe      	ldr	r3, [pc, #760]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4abd      	ldr	r2, [pc, #756]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002912:	f023 0304 	bic.w	r3, r3, #4
 8002916:	6213      	str	r3, [r2, #32]
 8002918:	e020      	b.n	800295c <HAL_RCC_OscConfig+0x9ac>
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b05      	cmp	r3, #5
 8002928:	d10c      	bne.n	8002944 <HAL_RCC_OscConfig+0x994>
 800292a:	4bb7      	ldr	r3, [pc, #732]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4ab6      	ldr	r2, [pc, #728]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	6213      	str	r3, [r2, #32]
 8002936:	4bb4      	ldr	r3, [pc, #720]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4ab3      	ldr	r2, [pc, #716]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6213      	str	r3, [r2, #32]
 8002942:	e00b      	b.n	800295c <HAL_RCC_OscConfig+0x9ac>
 8002944:	4bb0      	ldr	r3, [pc, #704]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4aaf      	ldr	r2, [pc, #700]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	6213      	str	r3, [r2, #32]
 8002950:	4bad      	ldr	r3, [pc, #692]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4aac      	ldr	r2, [pc, #688]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002956:	f023 0304 	bic.w	r3, r3, #4
 800295a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800295c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002960:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8081 	beq.w	8002a70 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296e:	f7fe fcbf 	bl	80012f0 <HAL_GetTick>
 8002972:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7fe fcba 	bl	80012f0 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002988:	4293      	cmp	r3, r2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e345      	b.n	800301c <HAL_RCC_OscConfig+0x106c>
 8002990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002994:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002998:	2202      	movs	r2, #2
 800299a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	fa93 f2a3 	rbit	r2, r3
 80029aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029bc:	2202      	movs	r2, #2
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	fa93 f2a3 	rbit	r2, r3
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029d6:	601a      	str	r2, [r3, #0]
  return result;
 80029d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029dc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_OscConfig+0xa4c>
 80029f6:	4b84      	ldr	r3, [pc, #528]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	e013      	b.n	8002a24 <HAL_RCC_OscConfig+0xa74>
 80029fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a00:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a04:	2202      	movs	r2, #2
 8002a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	fa93 f2a3 	rbit	r2, r3
 8002a16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	4b79      	ldr	r3, [pc, #484]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a28:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	6011      	str	r1, [r2, #0]
 8002a30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a34:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	fa92 f1a2 	rbit	r1, r2
 8002a3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a42:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a46:	6011      	str	r1, [r2, #0]
  return result;
 8002a48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a4c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	fab2 f282 	clz	r2, r2
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a5c:	b2d2      	uxtb	r2, r2
 8002a5e:	f002 021f 	and.w	r2, r2, #31
 8002a62:	2101      	movs	r1, #1
 8002a64:	fa01 f202 	lsl.w	r2, r1, r2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d084      	beq.n	8002978 <HAL_RCC_OscConfig+0x9c8>
 8002a6e:	e07f      	b.n	8002b70 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a70:	f7fe fc3e 	bl	80012f0 <HAL_GetTick>
 8002a74:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a78:	e00b      	b.n	8002a92 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7fe fc39 	bl	80012f0 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e2c4      	b.n	800301c <HAL_RCC_OscConfig+0x106c>
 8002a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a96:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	fa93 f2a3 	rbit	r2, r3
 8002aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aba:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002abe:	2202      	movs	r2, #2
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f2a3 	rbit	r2, r3
 8002ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ad8:	601a      	str	r2, [r3, #0]
  return result;
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002ae2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d102      	bne.n	8002afe <HAL_RCC_OscConfig+0xb4e>
 8002af8:	4b43      	ldr	r3, [pc, #268]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	e013      	b.n	8002b26 <HAL_RCC_OscConfig+0xb76>
 8002afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b02:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b06:	2202      	movs	r2, #2
 8002b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b0e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	fa93 f2a3 	rbit	r2, r3
 8002b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	4b39      	ldr	r3, [pc, #228]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b2a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002b2e:	2102      	movs	r1, #2
 8002b30:	6011      	str	r1, [r2, #0]
 8002b32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b36:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	fa92 f1a2 	rbit	r1, r2
 8002b40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b44:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b48:	6011      	str	r1, [r2, #0]
  return result;
 8002b4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b4e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	fab2 f282 	clz	r2, r2
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	f002 021f 	and.w	r2, r2, #31
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d184      	bne.n	8002a7a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b70:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b78:	4b23      	ldr	r3, [pc, #140]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	4a22      	ldr	r2, [pc, #136]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002b7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8242 	beq.w	800301a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b96:	4b1c      	ldr	r3, [pc, #112]	@ (8002c08 <HAL_RCC_OscConfig+0xc58>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	f000 8213 	beq.w	8002fca <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	f040 8162 	bne.w	8002e7a <HAL_RCC_OscConfig+0xeca>
 8002bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bba:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002bbe:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	fa93 f2a3 	rbit	r2, r3
 8002bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002bda:	601a      	str	r2, [r3, #0]
  return result;
 8002bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002be4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bf0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fb78 	bl	80012f0 <HAL_GetTick>
 8002c00:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c04:	e00c      	b.n	8002c20 <HAL_RCC_OscConfig+0xc70>
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe fb70 	bl	80012f0 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e1fd      	b.n	800301c <HAL_RCC_OscConfig+0x106c>
 8002c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c24:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c32:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f2a3 	rbit	r2, r3
 8002c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c40:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c44:	601a      	str	r2, [r3, #0]
  return result;
 8002c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d102      	bne.n	8002c6a <HAL_RCC_OscConfig+0xcba>
 8002c64:	4bb0      	ldr	r3, [pc, #704]	@ (8002f28 <HAL_RCC_OscConfig+0xf78>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	e027      	b.n	8002cba <HAL_RCC_OscConfig+0xd0a>
 8002c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	fa93 f2a3 	rbit	r2, r3
 8002c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c94:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002c98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	fa93 f2a3 	rbit	r2, r3
 8002cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	4b9c      	ldr	r3, [pc, #624]	@ (8002f28 <HAL_RCC_OscConfig+0xf78>)
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cbe:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002cc2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cc6:	6011      	str	r1, [r2, #0]
 8002cc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ccc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	fa92 f1a2 	rbit	r1, r2
 8002cd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cda:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002cde:	6011      	str	r1, [r2, #0]
  return result;
 8002ce0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ce4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	fab2 f282 	clz	r2, r2
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f042 0220 	orr.w	r2, r2, #32
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	f002 021f 	and.w	r2, r2, #31
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d182      	bne.n	8002c0c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d06:	4b88      	ldr	r3, [pc, #544]	@ (8002f28 <HAL_RCC_OscConfig+0xf78>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	430b      	orrs	r3, r1
 8002d28:	497f      	ldr	r1, [pc, #508]	@ (8002f28 <HAL_RCC_OscConfig+0xf78>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
 8002d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d32:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d36:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d40:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	fa93 f2a3 	rbit	r2, r3
 8002d4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d52:	601a      	str	r2, [r3, #0]
  return result;
 8002d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d58:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d5c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d68:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2301      	movs	r3, #1
 8002d72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe fabc 	bl	80012f0 <HAL_GetTick>
 8002d78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d7c:	e009      	b.n	8002d92 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7fe fab7 	bl	80012f0 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e144      	b.n	800301c <HAL_RCC_OscConfig+0x106c>
 8002d92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d96:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fa93 f2a3 	rbit	r2, r3
 8002dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002db6:	601a      	str	r2, [r3, #0]
  return result;
 8002db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002dc0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d102      	bne.n	8002ddc <HAL_RCC_OscConfig+0xe2c>
 8002dd6:	4b54      	ldr	r3, [pc, #336]	@ (8002f28 <HAL_RCC_OscConfig+0xf78>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	e027      	b.n	8002e2c <HAL_RCC_OscConfig+0xe7c>
 8002ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002de4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dee:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f2a3 	rbit	r2, r3
 8002df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e06:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e14:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	fa93 f2a3 	rbit	r2, r3
 8002e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e22:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	4b3f      	ldr	r3, [pc, #252]	@ (8002f28 <HAL_RCC_OscConfig+0xf78>)
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e30:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002e34:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e38:	6011      	str	r1, [r2, #0]
 8002e3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e3e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	fa92 f1a2 	rbit	r1, r2
 8002e48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e4c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e50:	6011      	str	r1, [r2, #0]
  return result;
 8002e52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e56:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	fab2 f282 	clz	r2, r2
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f042 0220 	orr.w	r2, r2, #32
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	f002 021f 	and.w	r2, r2, #31
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d082      	beq.n	8002d7e <HAL_RCC_OscConfig+0xdce>
 8002e78:	e0cf      	b.n	800301a <HAL_RCC_OscConfig+0x106a>
 8002e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	fa93 f2a3 	rbit	r2, r3
 8002e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002e9e:	601a      	str	r2, [r3, #0]
  return result;
 8002ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ea8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002eb4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fa16 	bl	80012f0 <HAL_GetTick>
 8002ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec8:	e009      	b.n	8002ede <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eca:	f7fe fa11 	bl	80012f0 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e09e      	b.n	800301c <HAL_RCC_OscConfig+0x106c>
 8002ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ee6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	fa93 f2a3 	rbit	r2, r3
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f02:	601a      	str	r2, [r3, #0]
  return result;
 8002f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f08:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d104      	bne.n	8002f2c <HAL_RCC_OscConfig+0xf7c>
 8002f22:	4b01      	ldr	r3, [pc, #4]	@ (8002f28 <HAL_RCC_OscConfig+0xf78>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	e029      	b.n	8002f7c <HAL_RCC_OscConfig+0xfcc>
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	fa93 f2a3 	rbit	r2, r3
 8002f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f56:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f64:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	fa93 f2a3 	rbit	r2, r3
 8002f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f72:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <HAL_RCC_OscConfig+0x1078>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f80:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f84:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002f88:	6011      	str	r1, [r2, #0]
 8002f8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f8e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	fa92 f1a2 	rbit	r1, r2
 8002f98:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f9c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002fa0:	6011      	str	r1, [r2, #0]
  return result;
 8002fa2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fa6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	fab2 f282 	clz	r2, r2
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	f042 0220 	orr.w	r2, r2, #32
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	f002 021f 	and.w	r2, r2, #31
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d180      	bne.n	8002eca <HAL_RCC_OscConfig+0xf1a>
 8002fc8:	e027      	b.n	800301a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e01e      	b.n	800301c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fde:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <HAL_RCC_OscConfig+0x1078>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fe6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002fea:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d10b      	bne.n	8003016 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ffe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003002:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003012:	429a      	cmp	r2, r3
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000

0800302c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b09e      	sub	sp, #120	@ 0x78
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e162      	b.n	800330a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003044:	4b90      	ldr	r3, [pc, #576]	@ (8003288 <HAL_RCC_ClockConfig+0x25c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d910      	bls.n	8003074 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b8d      	ldr	r3, [pc, #564]	@ (8003288 <HAL_RCC_ClockConfig+0x25c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 0207 	bic.w	r2, r3, #7
 800305a:	498b      	ldr	r1, [pc, #556]	@ (8003288 <HAL_RCC_ClockConfig+0x25c>)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b89      	ldr	r3, [pc, #548]	@ (8003288 <HAL_RCC_ClockConfig+0x25c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e14a      	b.n	800330a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003080:	4b82      	ldr	r3, [pc, #520]	@ (800328c <HAL_RCC_ClockConfig+0x260>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	497f      	ldr	r1, [pc, #508]	@ (800328c <HAL_RCC_ClockConfig+0x260>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80dc 	beq.w	8003258 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d13c      	bne.n	8003122 <HAL_RCC_ClockConfig+0xf6>
 80030a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030ac:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d102      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xa6>
 80030cc:	4b6f      	ldr	r3, [pc, #444]	@ (800328c <HAL_RCC_ClockConfig+0x260>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	e00f      	b.n	80030f2 <HAL_RCC_ClockConfig+0xc6>
 80030d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	667b      	str	r3, [r7, #100]	@ 0x64
 80030e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80030e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030ee:	4b67      	ldr	r3, [pc, #412]	@ (800328c <HAL_RCC_ClockConfig+0x260>)
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030fa:	fa92 f2a2 	rbit	r2, r2
 80030fe:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003100:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003102:	fab2 f282 	clz	r2, r2
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	f042 0220 	orr.w	r2, r2, #32
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	f002 021f 	and.w	r2, r2, #31
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f202 	lsl.w	r2, r1, r2
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d17b      	bne.n	8003216 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0f3      	b.n	800330a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d13c      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x178>
 800312a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800312e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003132:	fa93 f3a3 	rbit	r3, r3
 8003136:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b01      	cmp	r3, #1
 800314c:	d102      	bne.n	8003154 <HAL_RCC_ClockConfig+0x128>
 800314e:	4b4f      	ldr	r3, [pc, #316]	@ (800328c <HAL_RCC_ClockConfig+0x260>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	e00f      	b.n	8003174 <HAL_RCC_ClockConfig+0x148>
 8003154:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003158:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	647b      	str	r3, [r7, #68]	@ 0x44
 8003162:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003166:	643b      	str	r3, [r7, #64]	@ 0x40
 8003168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003170:	4b46      	ldr	r3, [pc, #280]	@ (800328c <HAL_RCC_ClockConfig+0x260>)
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003178:	63ba      	str	r2, [r7, #56]	@ 0x38
 800317a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800317c:	fa92 f2a2 	rbit	r2, r2
 8003180:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003182:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003184:	fab2 f282 	clz	r2, r2
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	f042 0220 	orr.w	r2, r2, #32
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	f002 021f 	and.w	r2, r2, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f202 	lsl.w	r2, r1, r2
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d13a      	bne.n	8003216 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0b2      	b.n	800330a <HAL_RCC_ClockConfig+0x2de>
 80031a4:	2302      	movs	r3, #2
 80031a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80031b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d102      	bne.n	80031cc <HAL_RCC_ClockConfig+0x1a0>
 80031c6:	4b31      	ldr	r3, [pc, #196]	@ (800328c <HAL_RCC_ClockConfig+0x260>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	e00d      	b.n	80031e8 <HAL_RCC_ClockConfig+0x1bc>
 80031cc:	2302      	movs	r3, #2
 80031ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d8:	2302      	movs	r3, #2
 80031da:	623b      	str	r3, [r7, #32]
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	4b29      	ldr	r3, [pc, #164]	@ (800328c <HAL_RCC_ClockConfig+0x260>)
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	2202      	movs	r2, #2
 80031ea:	61ba      	str	r2, [r7, #24]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	fa92 f2a2 	rbit	r2, r2
 80031f2:	617a      	str	r2, [r7, #20]
  return result;
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	fab2 f282 	clz	r2, r2
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	f042 0220 	orr.w	r2, r2, #32
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	f002 021f 	and.w	r2, r2, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e079      	b.n	800330a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003216:	4b1d      	ldr	r3, [pc, #116]	@ (800328c <HAL_RCC_ClockConfig+0x260>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f023 0203 	bic.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	491a      	ldr	r1, [pc, #104]	@ (800328c <HAL_RCC_ClockConfig+0x260>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003228:	f7fe f862 	bl	80012f0 <HAL_GetTick>
 800322c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	e00a      	b.n	8003246 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003230:	f7fe f85e 	bl	80012f0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e061      	b.n	800330a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	4b11      	ldr	r3, [pc, #68]	@ (800328c <HAL_RCC_ClockConfig+0x260>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 020c 	and.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d1eb      	bne.n	8003230 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <HAL_RCC_ClockConfig+0x25c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d214      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <HAL_RCC_ClockConfig+0x25c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 0207 	bic.w	r2, r3, #7
 800326e:	4906      	ldr	r1, [pc, #24]	@ (8003288 <HAL_RCC_ClockConfig+0x25c>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <HAL_RCC_ClockConfig+0x25c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e040      	b.n	800330a <HAL_RCC_ClockConfig+0x2de>
 8003288:	40022000 	.word	0x40022000
 800328c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800329c:	4b1d      	ldr	r3, [pc, #116]	@ (8003314 <HAL_RCC_ClockConfig+0x2e8>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	491a      	ldr	r1, [pc, #104]	@ (8003314 <HAL_RCC_ClockConfig+0x2e8>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ba:	4b16      	ldr	r3, [pc, #88]	@ (8003314 <HAL_RCC_ClockConfig+0x2e8>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4912      	ldr	r1, [pc, #72]	@ (8003314 <HAL_RCC_ClockConfig+0x2e8>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032ce:	f000 f829 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 80032d2:	4601      	mov	r1, r0
 80032d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003314 <HAL_RCC_ClockConfig+0x2e8>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032dc:	22f0      	movs	r2, #240	@ 0xf0
 80032de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	fa92 f2a2 	rbit	r2, r2
 80032e6:	60fa      	str	r2, [r7, #12]
  return result;
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	fab2 f282 	clz	r2, r2
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	40d3      	lsrs	r3, r2
 80032f2:	4a09      	ldr	r2, [pc, #36]	@ (8003318 <HAL_RCC_ClockConfig+0x2ec>)
 80032f4:	5cd3      	ldrb	r3, [r2, r3]
 80032f6:	fa21 f303 	lsr.w	r3, r1, r3
 80032fa:	4a08      	ldr	r2, [pc, #32]	@ (800331c <HAL_RCC_ClockConfig+0x2f0>)
 80032fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032fe:	4b08      	ldr	r3, [pc, #32]	@ (8003320 <HAL_RCC_ClockConfig+0x2f4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd ffb0 	bl	8001268 <HAL_InitTick>
  
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3778      	adds	r7, #120	@ 0x78
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000
 8003318:	08004fb8 	.word	0x08004fb8
 800331c:	20000278 	.word	0x20000278
 8003320:	2000027c 	.word	0x2000027c

08003324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800333e:	4b1e      	ldr	r3, [pc, #120]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b04      	cmp	r3, #4
 800334c:	d002      	beq.n	8003354 <HAL_RCC_GetSysClockFreq+0x30>
 800334e:	2b08      	cmp	r3, #8
 8003350:	d003      	beq.n	800335a <HAL_RCC_GetSysClockFreq+0x36>
 8003352:	e026      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003354:	4b19      	ldr	r3, [pc, #100]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003356:	613b      	str	r3, [r7, #16]
      break;
 8003358:	e026      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	0c9b      	lsrs	r3, r3, #18
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4a17      	ldr	r2, [pc, #92]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003368:	4b13      	ldr	r3, [pc, #76]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	4a14      	ldr	r2, [pc, #80]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003380:	4a0e      	ldr	r2, [pc, #56]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	fbb2 f2f3 	udiv	r2, r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	e004      	b.n	800339c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a0c      	ldr	r2, [pc, #48]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	613b      	str	r3, [r7, #16]
      break;
 80033a0:	e002      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a2:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x98>)
 80033a4:	613b      	str	r3, [r7, #16]
      break;
 80033a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a8:	693b      	ldr	r3, [r7, #16]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	007a1200 	.word	0x007a1200
 80033c0:	08004fd0 	.word	0x08004fd0
 80033c4:	08004fe0 	.word	0x08004fe0
 80033c8:	003d0900 	.word	0x003d0900

080033cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d0:	4b03      	ldr	r3, [pc, #12]	@ (80033e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000278 	.word	0x20000278

080033e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033ea:	f7ff ffef 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 80033ee:	4601      	mov	r1, r0
 80033f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033f8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80033fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	fa92 f2a2 	rbit	r2, r2
 8003404:	603a      	str	r2, [r7, #0]
  return result;
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	fab2 f282 	clz	r2, r2
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	40d3      	lsrs	r3, r2
 8003410:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003412:	5cd3      	ldrb	r3, [r2, r3]
 8003414:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	08004fc8 	.word	0x08004fc8

08003428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800342e:	f7ff ffcd 	bl	80033cc <HAL_RCC_GetHCLKFreq>
 8003432:	4601      	mov	r1, r0
 8003434:	4b0b      	ldr	r3, [pc, #44]	@ (8003464 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800343c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003440:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	fa92 f2a2 	rbit	r2, r2
 8003448:	603a      	str	r2, [r7, #0]
  return result;
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	fab2 f282 	clz	r2, r2
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	40d3      	lsrs	r3, r2
 8003454:	4a04      	ldr	r2, [pc, #16]	@ (8003468 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003456:	5cd3      	ldrb	r3, [r2, r3]
 8003458:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40021000 	.word	0x40021000
 8003468:	08004fc8 	.word	0x08004fc8

0800346c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e049      	b.n	8003512 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd fdf8 	bl	8001088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f000 f88a 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d001      	beq.n	8003534 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e038      	b.n	80035a6 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1c      	ldr	r2, [pc, #112]	@ (80035b4 <HAL_TIM_Base_Start+0x98>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00e      	beq.n	8003564 <HAL_TIM_Base_Start+0x48>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800354e:	d009      	beq.n	8003564 <HAL_TIM_Base_Start+0x48>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <HAL_TIM_Base_Start+0x9c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_TIM_Base_Start+0x48>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a17      	ldr	r2, [pc, #92]	@ (80035bc <HAL_TIM_Base_Start+0xa0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d115      	bne.n	8003590 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	4b15      	ldr	r3, [pc, #84]	@ (80035c0 <HAL_TIM_Base_Start+0xa4>)
 800356c:	4013      	ands	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b06      	cmp	r3, #6
 8003574:	d015      	beq.n	80035a2 <HAL_TIM_Base_Start+0x86>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800357c:	d011      	beq.n	80035a2 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0201 	orr.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358e:	e008      	b.n	80035a2 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e000      	b.n	80035a4 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40014000 	.word	0x40014000
 80035c0:	00010007 	.word	0x00010007

080035c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a38      	ldr	r2, [pc, #224]	@ (80036b8 <TIM_Base_SetConfig+0xf4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <TIM_Base_SetConfig+0x28>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e2:	d003      	beq.n	80035ec <TIM_Base_SetConfig+0x28>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a35      	ldr	r2, [pc, #212]	@ (80036bc <TIM_Base_SetConfig+0xf8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d108      	bne.n	80035fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a2d      	ldr	r2, [pc, #180]	@ (80036b8 <TIM_Base_SetConfig+0xf4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <TIM_Base_SetConfig+0x6a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800360c:	d00f      	beq.n	800362e <TIM_Base_SetConfig+0x6a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a2a      	ldr	r2, [pc, #168]	@ (80036bc <TIM_Base_SetConfig+0xf8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00b      	beq.n	800362e <TIM_Base_SetConfig+0x6a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a29      	ldr	r2, [pc, #164]	@ (80036c0 <TIM_Base_SetConfig+0xfc>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <TIM_Base_SetConfig+0x6a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a28      	ldr	r2, [pc, #160]	@ (80036c4 <TIM_Base_SetConfig+0x100>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_Base_SetConfig+0x6a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a27      	ldr	r2, [pc, #156]	@ (80036c8 <TIM_Base_SetConfig+0x104>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d108      	bne.n	8003640 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a14      	ldr	r2, [pc, #80]	@ (80036b8 <TIM_Base_SetConfig+0xf4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00b      	beq.n	8003684 <TIM_Base_SetConfig+0xc0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a14      	ldr	r2, [pc, #80]	@ (80036c0 <TIM_Base_SetConfig+0xfc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d007      	beq.n	8003684 <TIM_Base_SetConfig+0xc0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a13      	ldr	r2, [pc, #76]	@ (80036c4 <TIM_Base_SetConfig+0x100>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_Base_SetConfig+0xc0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a12      	ldr	r2, [pc, #72]	@ (80036c8 <TIM_Base_SetConfig+0x104>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d103      	bne.n	800368c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d105      	bne.n	80036aa <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f023 0201 	bic.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	611a      	str	r2, [r3, #16]
  }
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40012c00 	.word	0x40012c00
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40014400 	.word	0x40014400
 80036c8:	40014800 	.word	0x40014800

080036cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e054      	b.n	800378e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a24      	ldr	r2, [pc, #144]	@ (800379c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d108      	bne.n	8003720 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003714:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a17      	ldr	r2, [pc, #92]	@ (800379c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00e      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374c:	d009      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a13      	ldr	r2, [pc, #76]	@ (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a11      	ldr	r2, [pc, #68]	@ (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10c      	bne.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	4313      	orrs	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40000400 	.word	0x40000400
 80037a4:	40014000 	.word	0x40014000

080037a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e040      	b.n	800383c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd fc7c 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2224      	movs	r2, #36	@ 0x24
 80037d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f95e 	bl	8003ab0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f825 	bl	8003844 <UART_SetConfig>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e01b      	b.n	800383c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003822:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f9dd 	bl	8003bf4 <UART_CheckIdleState>
 800383a:	4603      	mov	r3, r0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b8a      	ldr	r3, [pc, #552]	@ (8003a98 <UART_SetConfig+0x254>)
 8003870:	4013      	ands	r3, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	6979      	ldr	r1, [r7, #20]
 8003878:	430b      	orrs	r3, r1
 800387a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a78      	ldr	r2, [pc, #480]	@ (8003a9c <UART_SetConfig+0x258>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d120      	bne.n	8003902 <UART_SetConfig+0xbe>
 80038c0:	4b77      	ldr	r3, [pc, #476]	@ (8003aa0 <UART_SetConfig+0x25c>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d817      	bhi.n	80038fc <UART_SetConfig+0xb8>
 80038cc:	a201      	add	r2, pc, #4	@ (adr r2, 80038d4 <UART_SetConfig+0x90>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	080038e5 	.word	0x080038e5
 80038d8:	080038f1 	.word	0x080038f1
 80038dc:	080038f7 	.word	0x080038f7
 80038e0:	080038eb 	.word	0x080038eb
 80038e4:	2300      	movs	r3, #0
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e01d      	b.n	8003926 <UART_SetConfig+0xe2>
 80038ea:	2302      	movs	r3, #2
 80038ec:	77fb      	strb	r3, [r7, #31]
 80038ee:	e01a      	b.n	8003926 <UART_SetConfig+0xe2>
 80038f0:	2304      	movs	r3, #4
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e017      	b.n	8003926 <UART_SetConfig+0xe2>
 80038f6:	2308      	movs	r3, #8
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e014      	b.n	8003926 <UART_SetConfig+0xe2>
 80038fc:	2310      	movs	r3, #16
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e011      	b.n	8003926 <UART_SetConfig+0xe2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a67      	ldr	r2, [pc, #412]	@ (8003aa4 <UART_SetConfig+0x260>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d102      	bne.n	8003912 <UART_SetConfig+0xce>
 800390c:	2300      	movs	r3, #0
 800390e:	77fb      	strb	r3, [r7, #31]
 8003910:	e009      	b.n	8003926 <UART_SetConfig+0xe2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a64      	ldr	r2, [pc, #400]	@ (8003aa8 <UART_SetConfig+0x264>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d102      	bne.n	8003922 <UART_SetConfig+0xde>
 800391c:	2300      	movs	r3, #0
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e001      	b.n	8003926 <UART_SetConfig+0xe2>
 8003922:	2310      	movs	r3, #16
 8003924:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800392e:	d15a      	bne.n	80039e6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003930:	7ffb      	ldrb	r3, [r7, #31]
 8003932:	2b08      	cmp	r3, #8
 8003934:	d827      	bhi.n	8003986 <UART_SetConfig+0x142>
 8003936:	a201      	add	r2, pc, #4	@ (adr r2, 800393c <UART_SetConfig+0xf8>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	08003961 	.word	0x08003961
 8003940:	08003969 	.word	0x08003969
 8003944:	08003971 	.word	0x08003971
 8003948:	08003987 	.word	0x08003987
 800394c:	08003977 	.word	0x08003977
 8003950:	08003987 	.word	0x08003987
 8003954:	08003987 	.word	0x08003987
 8003958:	08003987 	.word	0x08003987
 800395c:	0800397f 	.word	0x0800397f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003960:	f7ff fd40 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8003964:	61b8      	str	r0, [r7, #24]
        break;
 8003966:	e013      	b.n	8003990 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003968:	f7ff fd5e 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 800396c:	61b8      	str	r0, [r7, #24]
        break;
 800396e:	e00f      	b.n	8003990 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003970:	4b4e      	ldr	r3, [pc, #312]	@ (8003aac <UART_SetConfig+0x268>)
 8003972:	61bb      	str	r3, [r7, #24]
        break;
 8003974:	e00c      	b.n	8003990 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003976:	f7ff fcd5 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 800397a:	61b8      	str	r0, [r7, #24]
        break;
 800397c:	e008      	b.n	8003990 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800397e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003982:	61bb      	str	r3, [r7, #24]
        break;
 8003984:	e004      	b.n	8003990 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	77bb      	strb	r3, [r7, #30]
        break;
 800398e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d074      	beq.n	8003a80 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	005a      	lsls	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b0f      	cmp	r3, #15
 80039b0:	d916      	bls.n	80039e0 <UART_SetConfig+0x19c>
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b8:	d212      	bcs.n	80039e0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	f023 030f 	bic.w	r3, r3, #15
 80039c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	89fb      	ldrh	r3, [r7, #14]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	89fa      	ldrh	r2, [r7, #14]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	e04f      	b.n	8003a80 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	77bb      	strb	r3, [r7, #30]
 80039e4:	e04c      	b.n	8003a80 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039e6:	7ffb      	ldrb	r3, [r7, #31]
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d828      	bhi.n	8003a3e <UART_SetConfig+0x1fa>
 80039ec:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <UART_SetConfig+0x1b0>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a19 	.word	0x08003a19
 80039f8:	08003a21 	.word	0x08003a21
 80039fc:	08003a29 	.word	0x08003a29
 8003a00:	08003a3f 	.word	0x08003a3f
 8003a04:	08003a2f 	.word	0x08003a2f
 8003a08:	08003a3f 	.word	0x08003a3f
 8003a0c:	08003a3f 	.word	0x08003a3f
 8003a10:	08003a3f 	.word	0x08003a3f
 8003a14:	08003a37 	.word	0x08003a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a18:	f7ff fce4 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 8003a1c:	61b8      	str	r0, [r7, #24]
        break;
 8003a1e:	e013      	b.n	8003a48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a20:	f7ff fd02 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 8003a24:	61b8      	str	r0, [r7, #24]
        break;
 8003a26:	e00f      	b.n	8003a48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a28:	4b20      	ldr	r3, [pc, #128]	@ (8003aac <UART_SetConfig+0x268>)
 8003a2a:	61bb      	str	r3, [r7, #24]
        break;
 8003a2c:	e00c      	b.n	8003a48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a2e:	f7ff fc79 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 8003a32:	61b8      	str	r0, [r7, #24]
        break;
 8003a34:	e008      	b.n	8003a48 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a3a:	61bb      	str	r3, [r7, #24]
        break;
 8003a3c:	e004      	b.n	8003a48 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	77bb      	strb	r3, [r7, #30]
        break;
 8003a46:	bf00      	nop
    }

    if (pclk != 0U)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d018      	beq.n	8003a80 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	085a      	lsrs	r2, r3, #1
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	441a      	add	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b0f      	cmp	r3, #15
 8003a66:	d909      	bls.n	8003a7c <UART_SetConfig+0x238>
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a6e:	d205      	bcs.n	8003a7c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	e001      	b.n	8003a80 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	efff69f3 	.word	0xefff69f3
 8003a9c:	40013800 	.word	0x40013800
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40004400 	.word	0x40004400
 8003aa8:	40004800 	.word	0x40004800
 8003aac:	007a1200 	.word	0x007a1200

08003ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01a      	beq.n	8003bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bae:	d10a      	bne.n	8003bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b098      	sub	sp, #96	@ 0x60
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c04:	f7fd fb74 	bl	80012f0 <HAL_GetTick>
 8003c08:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d12e      	bne.n	8003c76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c20:	2200      	movs	r2, #0
 8003c22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f88c 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d021      	beq.n	8003c76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c46:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c52:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e6      	bne.n	8003c32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e062      	b.n	8003d3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d149      	bne.n	8003d18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f856 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d03c      	beq.n	8003d18 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	623b      	str	r3, [r7, #32]
   return(result);
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e6      	bne.n	8003c9e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	e853 3f00 	ldrex	r3, [r3]
 8003cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3308      	adds	r3, #8
 8003cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf0:	61fa      	str	r2, [r7, #28]
 8003cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf4:	69b9      	ldr	r1, [r7, #24]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	e841 2300 	strex	r3, r2, [r1]
 8003cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1e5      	bne.n	8003cd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e011      	b.n	8003d3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3758      	adds	r7, #88	@ 0x58
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d54:	e04f      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d04b      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5e:	f7fd fac7 	bl	80012f0 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e04e      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d037      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b80      	cmp	r3, #128	@ 0x80
 8003d8a:	d034      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b40      	cmp	r3, #64	@ 0x40
 8003d90:	d031      	beq.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d110      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2208      	movs	r2, #8
 8003da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f838 	bl	8003e1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2208      	movs	r2, #8
 8003db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e029      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dd0:	d111      	bne.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f81e 	bl	8003e1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e00f      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d0a0      	beq.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b095      	sub	sp, #84	@ 0x54
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e44:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e6      	bne.n	8003e26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3308      	adds	r3, #8
 8003e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e5      	bne.n	8003e58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d118      	bne.n	8003ec6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f023 0310 	bic.w	r3, r3, #16
 8003ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eb2:	61bb      	str	r3, [r7, #24]
 8003eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6979      	ldr	r1, [r7, #20]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e6      	bne.n	8003e94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003eda:	bf00      	nop
 8003edc:	3754      	adds	r7, #84	@ 0x54
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <memset>:
 8003ee6:	4402      	add	r2, r0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d100      	bne.n	8003ef0 <memset+0xa>
 8003eee:	4770      	bx	lr
 8003ef0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef4:	e7f9      	b.n	8003eea <memset+0x4>
	...

08003ef8 <__libc_init_array>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4d0d      	ldr	r5, [pc, #52]	@ (8003f30 <__libc_init_array+0x38>)
 8003efc:	4c0d      	ldr	r4, [pc, #52]	@ (8003f34 <__libc_init_array+0x3c>)
 8003efe:	1b64      	subs	r4, r4, r5
 8003f00:	10a4      	asrs	r4, r4, #2
 8003f02:	2600      	movs	r6, #0
 8003f04:	42a6      	cmp	r6, r4
 8003f06:	d109      	bne.n	8003f1c <__libc_init_array+0x24>
 8003f08:	4d0b      	ldr	r5, [pc, #44]	@ (8003f38 <__libc_init_array+0x40>)
 8003f0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003f3c <__libc_init_array+0x44>)
 8003f0c:	f001 f848 	bl	8004fa0 <_init>
 8003f10:	1b64      	subs	r4, r4, r5
 8003f12:	10a4      	asrs	r4, r4, #2
 8003f14:	2600      	movs	r6, #0
 8003f16:	42a6      	cmp	r6, r4
 8003f18:	d105      	bne.n	8003f26 <__libc_init_array+0x2e>
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f20:	4798      	blx	r3
 8003f22:	3601      	adds	r6, #1
 8003f24:	e7ee      	b.n	8003f04 <__libc_init_array+0xc>
 8003f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2a:	4798      	blx	r3
 8003f2c:	3601      	adds	r6, #1
 8003f2e:	e7f2      	b.n	8003f16 <__libc_init_array+0x1e>
 8003f30:	080051c8 	.word	0x080051c8
 8003f34:	080051c8 	.word	0x080051c8
 8003f38:	080051c8 	.word	0x080051c8
 8003f3c:	080051cc 	.word	0x080051cc

08003f40 <sin>:
 8003f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f42:	ec53 2b10 	vmov	r2, r3, d0
 8003f46:	4826      	ldr	r0, [pc, #152]	@ (8003fe0 <sin+0xa0>)
 8003f48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f4c:	4281      	cmp	r1, r0
 8003f4e:	d807      	bhi.n	8003f60 <sin+0x20>
 8003f50:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003fd8 <sin+0x98>
 8003f54:	2000      	movs	r0, #0
 8003f56:	b005      	add	sp, #20
 8003f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f5c:	f000 b90c 	b.w	8004178 <__kernel_sin>
 8003f60:	4820      	ldr	r0, [pc, #128]	@ (8003fe4 <sin+0xa4>)
 8003f62:	4281      	cmp	r1, r0
 8003f64:	d908      	bls.n	8003f78 <sin+0x38>
 8003f66:	4610      	mov	r0, r2
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f7fc fa5b 	bl	8000424 <__aeabi_dsub>
 8003f6e:	ec41 0b10 	vmov	d0, r0, r1
 8003f72:	b005      	add	sp, #20
 8003f74:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f78:	4668      	mov	r0, sp
 8003f7a:	f000 f9b9 	bl	80042f0 <__ieee754_rem_pio2>
 8003f7e:	f000 0003 	and.w	r0, r0, #3
 8003f82:	2801      	cmp	r0, #1
 8003f84:	d00c      	beq.n	8003fa0 <sin+0x60>
 8003f86:	2802      	cmp	r0, #2
 8003f88:	d011      	beq.n	8003fae <sin+0x6e>
 8003f8a:	b9e8      	cbnz	r0, 8003fc8 <sin+0x88>
 8003f8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f90:	ed9d 0b00 	vldr	d0, [sp]
 8003f94:	2001      	movs	r0, #1
 8003f96:	f000 f8ef 	bl	8004178 <__kernel_sin>
 8003f9a:	ec51 0b10 	vmov	r0, r1, d0
 8003f9e:	e7e6      	b.n	8003f6e <sin+0x2e>
 8003fa0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fa4:	ed9d 0b00 	vldr	d0, [sp]
 8003fa8:	f000 f81e 	bl	8003fe8 <__kernel_cos>
 8003fac:	e7f5      	b.n	8003f9a <sin+0x5a>
 8003fae:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fb2:	ed9d 0b00 	vldr	d0, [sp]
 8003fb6:	2001      	movs	r0, #1
 8003fb8:	f000 f8de 	bl	8004178 <__kernel_sin>
 8003fbc:	ec53 2b10 	vmov	r2, r3, d0
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003fc6:	e7d2      	b.n	8003f6e <sin+0x2e>
 8003fc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fcc:	ed9d 0b00 	vldr	d0, [sp]
 8003fd0:	f000 f80a 	bl	8003fe8 <__kernel_cos>
 8003fd4:	e7f2      	b.n	8003fbc <sin+0x7c>
 8003fd6:	bf00      	nop
	...
 8003fe0:	3fe921fb 	.word	0x3fe921fb
 8003fe4:	7fefffff 	.word	0x7fefffff

08003fe8 <__kernel_cos>:
 8003fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fec:	ec57 6b10 	vmov	r6, r7, d0
 8003ff0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003ff4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003ff8:	ed8d 1b00 	vstr	d1, [sp]
 8003ffc:	d206      	bcs.n	800400c <__kernel_cos+0x24>
 8003ffe:	4630      	mov	r0, r6
 8004000:	4639      	mov	r1, r7
 8004002:	f7fc fc4f 	bl	80008a4 <__aeabi_d2iz>
 8004006:	2800      	cmp	r0, #0
 8004008:	f000 8088 	beq.w	800411c <__kernel_cos+0x134>
 800400c:	4632      	mov	r2, r6
 800400e:	463b      	mov	r3, r7
 8004010:	4630      	mov	r0, r6
 8004012:	4639      	mov	r1, r7
 8004014:	f7fc f8d8 	bl	80001c8 <__aeabi_dmul>
 8004018:	4b51      	ldr	r3, [pc, #324]	@ (8004160 <__kernel_cos+0x178>)
 800401a:	2200      	movs	r2, #0
 800401c:	4604      	mov	r4, r0
 800401e:	460d      	mov	r5, r1
 8004020:	f7fc f8d2 	bl	80001c8 <__aeabi_dmul>
 8004024:	a340      	add	r3, pc, #256	@ (adr r3, 8004128 <__kernel_cos+0x140>)
 8004026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402a:	4682      	mov	sl, r0
 800402c:	468b      	mov	fp, r1
 800402e:	4620      	mov	r0, r4
 8004030:	4629      	mov	r1, r5
 8004032:	f7fc f8c9 	bl	80001c8 <__aeabi_dmul>
 8004036:	a33e      	add	r3, pc, #248	@ (adr r3, 8004130 <__kernel_cos+0x148>)
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f7fc f9f4 	bl	8000428 <__adddf3>
 8004040:	4622      	mov	r2, r4
 8004042:	462b      	mov	r3, r5
 8004044:	f7fc f8c0 	bl	80001c8 <__aeabi_dmul>
 8004048:	a33b      	add	r3, pc, #236	@ (adr r3, 8004138 <__kernel_cos+0x150>)
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	f7fc f9e9 	bl	8000424 <__aeabi_dsub>
 8004052:	4622      	mov	r2, r4
 8004054:	462b      	mov	r3, r5
 8004056:	f7fc f8b7 	bl	80001c8 <__aeabi_dmul>
 800405a:	a339      	add	r3, pc, #228	@ (adr r3, 8004140 <__kernel_cos+0x158>)
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f7fc f9e2 	bl	8000428 <__adddf3>
 8004064:	4622      	mov	r2, r4
 8004066:	462b      	mov	r3, r5
 8004068:	f7fc f8ae 	bl	80001c8 <__aeabi_dmul>
 800406c:	a336      	add	r3, pc, #216	@ (adr r3, 8004148 <__kernel_cos+0x160>)
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f7fc f9d7 	bl	8000424 <__aeabi_dsub>
 8004076:	4622      	mov	r2, r4
 8004078:	462b      	mov	r3, r5
 800407a:	f7fc f8a5 	bl	80001c8 <__aeabi_dmul>
 800407e:	a334      	add	r3, pc, #208	@ (adr r3, 8004150 <__kernel_cos+0x168>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc f9d0 	bl	8000428 <__adddf3>
 8004088:	4622      	mov	r2, r4
 800408a:	462b      	mov	r3, r5
 800408c:	f7fc f89c 	bl	80001c8 <__aeabi_dmul>
 8004090:	4622      	mov	r2, r4
 8004092:	462b      	mov	r3, r5
 8004094:	f7fc f898 	bl	80001c8 <__aeabi_dmul>
 8004098:	e9dd 2300 	ldrd	r2, r3, [sp]
 800409c:	4604      	mov	r4, r0
 800409e:	460d      	mov	r5, r1
 80040a0:	4630      	mov	r0, r6
 80040a2:	4639      	mov	r1, r7
 80040a4:	f7fc f890 	bl	80001c8 <__aeabi_dmul>
 80040a8:	460b      	mov	r3, r1
 80040aa:	4602      	mov	r2, r0
 80040ac:	4629      	mov	r1, r5
 80040ae:	4620      	mov	r0, r4
 80040b0:	f7fc f9b8 	bl	8000424 <__aeabi_dsub>
 80040b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004164 <__kernel_cos+0x17c>)
 80040b6:	4598      	cmp	r8, r3
 80040b8:	4606      	mov	r6, r0
 80040ba:	460f      	mov	r7, r1
 80040bc:	d810      	bhi.n	80040e0 <__kernel_cos+0xf8>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4650      	mov	r0, sl
 80040c4:	4659      	mov	r1, fp
 80040c6:	f7fc f9ad 	bl	8000424 <__aeabi_dsub>
 80040ca:	460b      	mov	r3, r1
 80040cc:	4926      	ldr	r1, [pc, #152]	@ (8004168 <__kernel_cos+0x180>)
 80040ce:	4602      	mov	r2, r0
 80040d0:	2000      	movs	r0, #0
 80040d2:	f7fc f9a7 	bl	8000424 <__aeabi_dsub>
 80040d6:	ec41 0b10 	vmov	d0, r0, r1
 80040da:	b003      	add	sp, #12
 80040dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040e0:	4b22      	ldr	r3, [pc, #136]	@ (800416c <__kernel_cos+0x184>)
 80040e2:	4921      	ldr	r1, [pc, #132]	@ (8004168 <__kernel_cos+0x180>)
 80040e4:	4598      	cmp	r8, r3
 80040e6:	bf8c      	ite	hi
 80040e8:	4d21      	ldrhi	r5, [pc, #132]	@ (8004170 <__kernel_cos+0x188>)
 80040ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80040ee:	2400      	movs	r4, #0
 80040f0:	4622      	mov	r2, r4
 80040f2:	462b      	mov	r3, r5
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7fc f995 	bl	8000424 <__aeabi_dsub>
 80040fa:	4622      	mov	r2, r4
 80040fc:	4680      	mov	r8, r0
 80040fe:	4689      	mov	r9, r1
 8004100:	462b      	mov	r3, r5
 8004102:	4650      	mov	r0, sl
 8004104:	4659      	mov	r1, fp
 8004106:	f7fc f98d 	bl	8000424 <__aeabi_dsub>
 800410a:	4632      	mov	r2, r6
 800410c:	463b      	mov	r3, r7
 800410e:	f7fc f989 	bl	8000424 <__aeabi_dsub>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4640      	mov	r0, r8
 8004118:	4649      	mov	r1, r9
 800411a:	e7da      	b.n	80040d2 <__kernel_cos+0xea>
 800411c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8004158 <__kernel_cos+0x170>
 8004120:	e7db      	b.n	80040da <__kernel_cos+0xf2>
 8004122:	bf00      	nop
 8004124:	f3af 8000 	nop.w
 8004128:	be8838d4 	.word	0xbe8838d4
 800412c:	bda8fae9 	.word	0xbda8fae9
 8004130:	bdb4b1c4 	.word	0xbdb4b1c4
 8004134:	3e21ee9e 	.word	0x3e21ee9e
 8004138:	809c52ad 	.word	0x809c52ad
 800413c:	3e927e4f 	.word	0x3e927e4f
 8004140:	19cb1590 	.word	0x19cb1590
 8004144:	3efa01a0 	.word	0x3efa01a0
 8004148:	16c15177 	.word	0x16c15177
 800414c:	3f56c16c 	.word	0x3f56c16c
 8004150:	5555554c 	.word	0x5555554c
 8004154:	3fa55555 	.word	0x3fa55555
 8004158:	00000000 	.word	0x00000000
 800415c:	3ff00000 	.word	0x3ff00000
 8004160:	3fe00000 	.word	0x3fe00000
 8004164:	3fd33332 	.word	0x3fd33332
 8004168:	3ff00000 	.word	0x3ff00000
 800416c:	3fe90000 	.word	0x3fe90000
 8004170:	3fd20000 	.word	0x3fd20000
 8004174:	00000000 	.word	0x00000000

08004178 <__kernel_sin>:
 8004178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800417c:	ec55 4b10 	vmov	r4, r5, d0
 8004180:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004184:	b085      	sub	sp, #20
 8004186:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800418a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800418e:	4680      	mov	r8, r0
 8004190:	d205      	bcs.n	800419e <__kernel_sin+0x26>
 8004192:	4620      	mov	r0, r4
 8004194:	4629      	mov	r1, r5
 8004196:	f7fc fb85 	bl	80008a4 <__aeabi_d2iz>
 800419a:	2800      	cmp	r0, #0
 800419c:	d052      	beq.n	8004244 <__kernel_sin+0xcc>
 800419e:	4622      	mov	r2, r4
 80041a0:	462b      	mov	r3, r5
 80041a2:	4620      	mov	r0, r4
 80041a4:	4629      	mov	r1, r5
 80041a6:	f7fc f80f 	bl	80001c8 <__aeabi_dmul>
 80041aa:	4682      	mov	sl, r0
 80041ac:	468b      	mov	fp, r1
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4620      	mov	r0, r4
 80041b4:	4629      	mov	r1, r5
 80041b6:	f7fc f807 	bl	80001c8 <__aeabi_dmul>
 80041ba:	a342      	add	r3, pc, #264	@ (adr r3, 80042c4 <__kernel_sin+0x14c>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	e9cd 0100 	strd	r0, r1, [sp]
 80041c4:	4650      	mov	r0, sl
 80041c6:	4659      	mov	r1, fp
 80041c8:	f7fb fffe 	bl	80001c8 <__aeabi_dmul>
 80041cc:	a33f      	add	r3, pc, #252	@ (adr r3, 80042cc <__kernel_sin+0x154>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f7fc f927 	bl	8000424 <__aeabi_dsub>
 80041d6:	4652      	mov	r2, sl
 80041d8:	465b      	mov	r3, fp
 80041da:	f7fb fff5 	bl	80001c8 <__aeabi_dmul>
 80041de:	a33d      	add	r3, pc, #244	@ (adr r3, 80042d4 <__kernel_sin+0x15c>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f7fc f920 	bl	8000428 <__adddf3>
 80041e8:	4652      	mov	r2, sl
 80041ea:	465b      	mov	r3, fp
 80041ec:	f7fb ffec 	bl	80001c8 <__aeabi_dmul>
 80041f0:	a33a      	add	r3, pc, #232	@ (adr r3, 80042dc <__kernel_sin+0x164>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f7fc f915 	bl	8000424 <__aeabi_dsub>
 80041fa:	4652      	mov	r2, sl
 80041fc:	465b      	mov	r3, fp
 80041fe:	f7fb ffe3 	bl	80001c8 <__aeabi_dmul>
 8004202:	a338      	add	r3, pc, #224	@ (adr r3, 80042e4 <__kernel_sin+0x16c>)
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f7fc f90e 	bl	8000428 <__adddf3>
 800420c:	4606      	mov	r6, r0
 800420e:	460f      	mov	r7, r1
 8004210:	f1b8 0f00 	cmp.w	r8, #0
 8004214:	d11b      	bne.n	800424e <__kernel_sin+0xd6>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4650      	mov	r0, sl
 800421c:	4659      	mov	r1, fp
 800421e:	f7fb ffd3 	bl	80001c8 <__aeabi_dmul>
 8004222:	a325      	add	r3, pc, #148	@ (adr r3, 80042b8 <__kernel_sin+0x140>)
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f7fc f8fc 	bl	8000424 <__aeabi_dsub>
 800422c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004230:	f7fb ffca 	bl	80001c8 <__aeabi_dmul>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4620      	mov	r0, r4
 800423a:	4629      	mov	r1, r5
 800423c:	f7fc f8f4 	bl	8000428 <__adddf3>
 8004240:	4604      	mov	r4, r0
 8004242:	460d      	mov	r5, r1
 8004244:	ec45 4b10 	vmov	d0, r4, r5
 8004248:	b005      	add	sp, #20
 800424a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004252:	4b1b      	ldr	r3, [pc, #108]	@ (80042c0 <__kernel_sin+0x148>)
 8004254:	2200      	movs	r2, #0
 8004256:	f7fb ffb7 	bl	80001c8 <__aeabi_dmul>
 800425a:	4632      	mov	r2, r6
 800425c:	4680      	mov	r8, r0
 800425e:	4689      	mov	r9, r1
 8004260:	463b      	mov	r3, r7
 8004262:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004266:	f7fb ffaf 	bl	80001c8 <__aeabi_dmul>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4640      	mov	r0, r8
 8004270:	4649      	mov	r1, r9
 8004272:	f7fc f8d7 	bl	8000424 <__aeabi_dsub>
 8004276:	4652      	mov	r2, sl
 8004278:	465b      	mov	r3, fp
 800427a:	f7fb ffa5 	bl	80001c8 <__aeabi_dmul>
 800427e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004282:	f7fc f8cf 	bl	8000424 <__aeabi_dsub>
 8004286:	a30c      	add	r3, pc, #48	@ (adr r3, 80042b8 <__kernel_sin+0x140>)
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	4606      	mov	r6, r0
 800428e:	460f      	mov	r7, r1
 8004290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004294:	f7fb ff98 	bl	80001c8 <__aeabi_dmul>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4630      	mov	r0, r6
 800429e:	4639      	mov	r1, r7
 80042a0:	f7fc f8c2 	bl	8000428 <__adddf3>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4620      	mov	r0, r4
 80042aa:	4629      	mov	r1, r5
 80042ac:	f7fc f8ba 	bl	8000424 <__aeabi_dsub>
 80042b0:	e7c6      	b.n	8004240 <__kernel_sin+0xc8>
 80042b2:	bf00      	nop
 80042b4:	f3af 8000 	nop.w
 80042b8:	55555549 	.word	0x55555549
 80042bc:	3fc55555 	.word	0x3fc55555
 80042c0:	3fe00000 	.word	0x3fe00000
 80042c4:	5acfd57c 	.word	0x5acfd57c
 80042c8:	3de5d93a 	.word	0x3de5d93a
 80042cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80042d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80042d4:	57b1fe7d 	.word	0x57b1fe7d
 80042d8:	3ec71de3 	.word	0x3ec71de3
 80042dc:	19c161d5 	.word	0x19c161d5
 80042e0:	3f2a01a0 	.word	0x3f2a01a0
 80042e4:	1110f8a6 	.word	0x1110f8a6
 80042e8:	3f811111 	.word	0x3f811111
 80042ec:	00000000 	.word	0x00000000

080042f0 <__ieee754_rem_pio2>:
 80042f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f4:	ec57 6b10 	vmov	r6, r7, d0
 80042f8:	4bc5      	ldr	r3, [pc, #788]	@ (8004610 <__ieee754_rem_pio2+0x320>)
 80042fa:	b08d      	sub	sp, #52	@ 0x34
 80042fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004300:	4598      	cmp	r8, r3
 8004302:	4604      	mov	r4, r0
 8004304:	9704      	str	r7, [sp, #16]
 8004306:	d807      	bhi.n	8004318 <__ieee754_rem_pio2+0x28>
 8004308:	2200      	movs	r2, #0
 800430a:	2300      	movs	r3, #0
 800430c:	ed80 0b00 	vstr	d0, [r0]
 8004310:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004314:	2500      	movs	r5, #0
 8004316:	e028      	b.n	800436a <__ieee754_rem_pio2+0x7a>
 8004318:	4bbe      	ldr	r3, [pc, #760]	@ (8004614 <__ieee754_rem_pio2+0x324>)
 800431a:	4598      	cmp	r8, r3
 800431c:	d878      	bhi.n	8004410 <__ieee754_rem_pio2+0x120>
 800431e:	9b04      	ldr	r3, [sp, #16]
 8004320:	4dbd      	ldr	r5, [pc, #756]	@ (8004618 <__ieee754_rem_pio2+0x328>)
 8004322:	2b00      	cmp	r3, #0
 8004324:	4630      	mov	r0, r6
 8004326:	a3ac      	add	r3, pc, #688	@ (adr r3, 80045d8 <__ieee754_rem_pio2+0x2e8>)
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	4639      	mov	r1, r7
 800432e:	dd38      	ble.n	80043a2 <__ieee754_rem_pio2+0xb2>
 8004330:	f7fc f878 	bl	8000424 <__aeabi_dsub>
 8004334:	45a8      	cmp	r8, r5
 8004336:	4606      	mov	r6, r0
 8004338:	460f      	mov	r7, r1
 800433a:	d01a      	beq.n	8004372 <__ieee754_rem_pio2+0x82>
 800433c:	a3a8      	add	r3, pc, #672	@ (adr r3, 80045e0 <__ieee754_rem_pio2+0x2f0>)
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f7fc f86f 	bl	8000424 <__aeabi_dsub>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	4680      	mov	r8, r0
 800434c:	4689      	mov	r9, r1
 800434e:	4630      	mov	r0, r6
 8004350:	4639      	mov	r1, r7
 8004352:	f7fc f867 	bl	8000424 <__aeabi_dsub>
 8004356:	a3a2      	add	r3, pc, #648	@ (adr r3, 80045e0 <__ieee754_rem_pio2+0x2f0>)
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f7fc f862 	bl	8000424 <__aeabi_dsub>
 8004360:	e9c4 8900 	strd	r8, r9, [r4]
 8004364:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004368:	2501      	movs	r5, #1
 800436a:	4628      	mov	r0, r5
 800436c:	b00d      	add	sp, #52	@ 0x34
 800436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004372:	a39d      	add	r3, pc, #628	@ (adr r3, 80045e8 <__ieee754_rem_pio2+0x2f8>)
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f7fc f854 	bl	8000424 <__aeabi_dsub>
 800437c:	a39c      	add	r3, pc, #624	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x300>)
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	4606      	mov	r6, r0
 8004384:	460f      	mov	r7, r1
 8004386:	f7fc f84d 	bl	8000424 <__aeabi_dsub>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4680      	mov	r8, r0
 8004390:	4689      	mov	r9, r1
 8004392:	4630      	mov	r0, r6
 8004394:	4639      	mov	r1, r7
 8004396:	f7fc f845 	bl	8000424 <__aeabi_dsub>
 800439a:	a395      	add	r3, pc, #596	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x300>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	e7dc      	b.n	800435c <__ieee754_rem_pio2+0x6c>
 80043a2:	f7fc f841 	bl	8000428 <__adddf3>
 80043a6:	45a8      	cmp	r8, r5
 80043a8:	4606      	mov	r6, r0
 80043aa:	460f      	mov	r7, r1
 80043ac:	d018      	beq.n	80043e0 <__ieee754_rem_pio2+0xf0>
 80043ae:	a38c      	add	r3, pc, #560	@ (adr r3, 80045e0 <__ieee754_rem_pio2+0x2f0>)
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f7fc f838 	bl	8000428 <__adddf3>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4680      	mov	r8, r0
 80043be:	4689      	mov	r9, r1
 80043c0:	4630      	mov	r0, r6
 80043c2:	4639      	mov	r1, r7
 80043c4:	f7fc f82e 	bl	8000424 <__aeabi_dsub>
 80043c8:	a385      	add	r3, pc, #532	@ (adr r3, 80045e0 <__ieee754_rem_pio2+0x2f0>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f7fc f82b 	bl	8000428 <__adddf3>
 80043d2:	f04f 35ff 	mov.w	r5, #4294967295
 80043d6:	e9c4 8900 	strd	r8, r9, [r4]
 80043da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80043de:	e7c4      	b.n	800436a <__ieee754_rem_pio2+0x7a>
 80043e0:	a381      	add	r3, pc, #516	@ (adr r3, 80045e8 <__ieee754_rem_pio2+0x2f8>)
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	f7fc f81f 	bl	8000428 <__adddf3>
 80043ea:	a381      	add	r3, pc, #516	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x300>)
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	4606      	mov	r6, r0
 80043f2:	460f      	mov	r7, r1
 80043f4:	f7fc f818 	bl	8000428 <__adddf3>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4680      	mov	r8, r0
 80043fe:	4689      	mov	r9, r1
 8004400:	4630      	mov	r0, r6
 8004402:	4639      	mov	r1, r7
 8004404:	f7fc f80e 	bl	8000424 <__aeabi_dsub>
 8004408:	a379      	add	r3, pc, #484	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x300>)
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	e7de      	b.n	80043ce <__ieee754_rem_pio2+0xde>
 8004410:	4b82      	ldr	r3, [pc, #520]	@ (800461c <__ieee754_rem_pio2+0x32c>)
 8004412:	4598      	cmp	r8, r3
 8004414:	f200 80d1 	bhi.w	80045ba <__ieee754_rem_pio2+0x2ca>
 8004418:	f000 f966 	bl	80046e8 <fabs>
 800441c:	ec57 6b10 	vmov	r6, r7, d0
 8004420:	a375      	add	r3, pc, #468	@ (adr r3, 80045f8 <__ieee754_rem_pio2+0x308>)
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	4630      	mov	r0, r6
 8004428:	4639      	mov	r1, r7
 800442a:	f7fb fecd 	bl	80001c8 <__aeabi_dmul>
 800442e:	4b7c      	ldr	r3, [pc, #496]	@ (8004620 <__ieee754_rem_pio2+0x330>)
 8004430:	2200      	movs	r2, #0
 8004432:	f7fb fff9 	bl	8000428 <__adddf3>
 8004436:	f7fc fa35 	bl	80008a4 <__aeabi_d2iz>
 800443a:	4605      	mov	r5, r0
 800443c:	f7fc f940 	bl	80006c0 <__aeabi_i2d>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004448:	a363      	add	r3, pc, #396	@ (adr r3, 80045d8 <__ieee754_rem_pio2+0x2e8>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f7fb febb 	bl	80001c8 <__aeabi_dmul>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4630      	mov	r0, r6
 8004458:	4639      	mov	r1, r7
 800445a:	f7fb ffe3 	bl	8000424 <__aeabi_dsub>
 800445e:	a360      	add	r3, pc, #384	@ (adr r3, 80045e0 <__ieee754_rem_pio2+0x2f0>)
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	4682      	mov	sl, r0
 8004466:	468b      	mov	fp, r1
 8004468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800446c:	f7fb feac 	bl	80001c8 <__aeabi_dmul>
 8004470:	2d1f      	cmp	r5, #31
 8004472:	4606      	mov	r6, r0
 8004474:	460f      	mov	r7, r1
 8004476:	dc0c      	bgt.n	8004492 <__ieee754_rem_pio2+0x1a2>
 8004478:	4b6a      	ldr	r3, [pc, #424]	@ (8004624 <__ieee754_rem_pio2+0x334>)
 800447a:	1e6a      	subs	r2, r5, #1
 800447c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004480:	4543      	cmp	r3, r8
 8004482:	d006      	beq.n	8004492 <__ieee754_rem_pio2+0x1a2>
 8004484:	4632      	mov	r2, r6
 8004486:	463b      	mov	r3, r7
 8004488:	4650      	mov	r0, sl
 800448a:	4659      	mov	r1, fp
 800448c:	f7fb ffca 	bl	8000424 <__aeabi_dsub>
 8004490:	e00e      	b.n	80044b0 <__ieee754_rem_pio2+0x1c0>
 8004492:	463b      	mov	r3, r7
 8004494:	4632      	mov	r2, r6
 8004496:	4650      	mov	r0, sl
 8004498:	4659      	mov	r1, fp
 800449a:	f7fb ffc3 	bl	8000424 <__aeabi_dsub>
 800449e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80044a2:	9305      	str	r3, [sp, #20]
 80044a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80044a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	dc02      	bgt.n	80044b6 <__ieee754_rem_pio2+0x1c6>
 80044b0:	e9c4 0100 	strd	r0, r1, [r4]
 80044b4:	e039      	b.n	800452a <__ieee754_rem_pio2+0x23a>
 80044b6:	a34c      	add	r3, pc, #304	@ (adr r3, 80045e8 <__ieee754_rem_pio2+0x2f8>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044c0:	f7fb fe82 	bl	80001c8 <__aeabi_dmul>
 80044c4:	4606      	mov	r6, r0
 80044c6:	460f      	mov	r7, r1
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4650      	mov	r0, sl
 80044ce:	4659      	mov	r1, fp
 80044d0:	f7fb ffa8 	bl	8000424 <__aeabi_dsub>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4680      	mov	r8, r0
 80044da:	4689      	mov	r9, r1
 80044dc:	4650      	mov	r0, sl
 80044de:	4659      	mov	r1, fp
 80044e0:	f7fb ffa0 	bl	8000424 <__aeabi_dsub>
 80044e4:	4632      	mov	r2, r6
 80044e6:	463b      	mov	r3, r7
 80044e8:	f7fb ff9c 	bl	8000424 <__aeabi_dsub>
 80044ec:	a340      	add	r3, pc, #256	@ (adr r3, 80045f0 <__ieee754_rem_pio2+0x300>)
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	4606      	mov	r6, r0
 80044f4:	460f      	mov	r7, r1
 80044f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044fa:	f7fb fe65 	bl	80001c8 <__aeabi_dmul>
 80044fe:	4632      	mov	r2, r6
 8004500:	463b      	mov	r3, r7
 8004502:	f7fb ff8f 	bl	8000424 <__aeabi_dsub>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4606      	mov	r6, r0
 800450c:	460f      	mov	r7, r1
 800450e:	4640      	mov	r0, r8
 8004510:	4649      	mov	r1, r9
 8004512:	f7fb ff87 	bl	8000424 <__aeabi_dsub>
 8004516:	9a05      	ldr	r2, [sp, #20]
 8004518:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b31      	cmp	r3, #49	@ 0x31
 8004520:	dc20      	bgt.n	8004564 <__ieee754_rem_pio2+0x274>
 8004522:	e9c4 0100 	strd	r0, r1, [r4]
 8004526:	46c2      	mov	sl, r8
 8004528:	46cb      	mov	fp, r9
 800452a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800452e:	4650      	mov	r0, sl
 8004530:	4642      	mov	r2, r8
 8004532:	464b      	mov	r3, r9
 8004534:	4659      	mov	r1, fp
 8004536:	f7fb ff75 	bl	8000424 <__aeabi_dsub>
 800453a:	463b      	mov	r3, r7
 800453c:	4632      	mov	r2, r6
 800453e:	f7fb ff71 	bl	8000424 <__aeabi_dsub>
 8004542:	9b04      	ldr	r3, [sp, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800454a:	f6bf af0e 	bge.w	800436a <__ieee754_rem_pio2+0x7a>
 800454e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004552:	6063      	str	r3, [r4, #4]
 8004554:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004558:	f8c4 8000 	str.w	r8, [r4]
 800455c:	60a0      	str	r0, [r4, #8]
 800455e:	60e3      	str	r3, [r4, #12]
 8004560:	426d      	negs	r5, r5
 8004562:	e702      	b.n	800436a <__ieee754_rem_pio2+0x7a>
 8004564:	a326      	add	r3, pc, #152	@ (adr r3, 8004600 <__ieee754_rem_pio2+0x310>)
 8004566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800456e:	f7fb fe2b 	bl	80001c8 <__aeabi_dmul>
 8004572:	4606      	mov	r6, r0
 8004574:	460f      	mov	r7, r1
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4640      	mov	r0, r8
 800457c:	4649      	mov	r1, r9
 800457e:	f7fb ff51 	bl	8000424 <__aeabi_dsub>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4682      	mov	sl, r0
 8004588:	468b      	mov	fp, r1
 800458a:	4640      	mov	r0, r8
 800458c:	4649      	mov	r1, r9
 800458e:	f7fb ff49 	bl	8000424 <__aeabi_dsub>
 8004592:	4632      	mov	r2, r6
 8004594:	463b      	mov	r3, r7
 8004596:	f7fb ff45 	bl	8000424 <__aeabi_dsub>
 800459a:	a31b      	add	r3, pc, #108	@ (adr r3, 8004608 <__ieee754_rem_pio2+0x318>)
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	4606      	mov	r6, r0
 80045a2:	460f      	mov	r7, r1
 80045a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045a8:	f7fb fe0e 	bl	80001c8 <__aeabi_dmul>
 80045ac:	4632      	mov	r2, r6
 80045ae:	463b      	mov	r3, r7
 80045b0:	f7fb ff38 	bl	8000424 <__aeabi_dsub>
 80045b4:	4606      	mov	r6, r0
 80045b6:	460f      	mov	r7, r1
 80045b8:	e764      	b.n	8004484 <__ieee754_rem_pio2+0x194>
 80045ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004628 <__ieee754_rem_pio2+0x338>)
 80045bc:	4598      	cmp	r8, r3
 80045be:	d935      	bls.n	800462c <__ieee754_rem_pio2+0x33c>
 80045c0:	4632      	mov	r2, r6
 80045c2:	463b      	mov	r3, r7
 80045c4:	4630      	mov	r0, r6
 80045c6:	4639      	mov	r1, r7
 80045c8:	f7fb ff2c 	bl	8000424 <__aeabi_dsub>
 80045cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80045d0:	e9c4 0100 	strd	r0, r1, [r4]
 80045d4:	e69e      	b.n	8004314 <__ieee754_rem_pio2+0x24>
 80045d6:	bf00      	nop
 80045d8:	54400000 	.word	0x54400000
 80045dc:	3ff921fb 	.word	0x3ff921fb
 80045e0:	1a626331 	.word	0x1a626331
 80045e4:	3dd0b461 	.word	0x3dd0b461
 80045e8:	1a600000 	.word	0x1a600000
 80045ec:	3dd0b461 	.word	0x3dd0b461
 80045f0:	2e037073 	.word	0x2e037073
 80045f4:	3ba3198a 	.word	0x3ba3198a
 80045f8:	6dc9c883 	.word	0x6dc9c883
 80045fc:	3fe45f30 	.word	0x3fe45f30
 8004600:	2e000000 	.word	0x2e000000
 8004604:	3ba3198a 	.word	0x3ba3198a
 8004608:	252049c1 	.word	0x252049c1
 800460c:	397b839a 	.word	0x397b839a
 8004610:	3fe921fb 	.word	0x3fe921fb
 8004614:	4002d97b 	.word	0x4002d97b
 8004618:	3ff921fb 	.word	0x3ff921fb
 800461c:	413921fb 	.word	0x413921fb
 8004620:	3fe00000 	.word	0x3fe00000
 8004624:	08004ff0 	.word	0x08004ff0
 8004628:	7fefffff 	.word	0x7fefffff
 800462c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004630:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004634:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004638:	4630      	mov	r0, r6
 800463a:	460f      	mov	r7, r1
 800463c:	f7fc f932 	bl	80008a4 <__aeabi_d2iz>
 8004640:	f7fc f83e 	bl	80006c0 <__aeabi_i2d>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4630      	mov	r0, r6
 800464a:	4639      	mov	r1, r7
 800464c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004650:	f7fb fee8 	bl	8000424 <__aeabi_dsub>
 8004654:	4b22      	ldr	r3, [pc, #136]	@ (80046e0 <__ieee754_rem_pio2+0x3f0>)
 8004656:	2200      	movs	r2, #0
 8004658:	f7fb fdb6 	bl	80001c8 <__aeabi_dmul>
 800465c:	460f      	mov	r7, r1
 800465e:	4606      	mov	r6, r0
 8004660:	f7fc f920 	bl	80008a4 <__aeabi_d2iz>
 8004664:	f7fc f82c 	bl	80006c0 <__aeabi_i2d>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4630      	mov	r0, r6
 800466e:	4639      	mov	r1, r7
 8004670:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004674:	f7fb fed6 	bl	8000424 <__aeabi_dsub>
 8004678:	4b19      	ldr	r3, [pc, #100]	@ (80046e0 <__ieee754_rem_pio2+0x3f0>)
 800467a:	2200      	movs	r2, #0
 800467c:	f7fb fda4 	bl	80001c8 <__aeabi_dmul>
 8004680:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004684:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004688:	f04f 0803 	mov.w	r8, #3
 800468c:	2600      	movs	r6, #0
 800468e:	2700      	movs	r7, #0
 8004690:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004694:	4632      	mov	r2, r6
 8004696:	463b      	mov	r3, r7
 8004698:	46c2      	mov	sl, r8
 800469a:	f108 38ff 	add.w	r8, r8, #4294967295
 800469e:	f7fc f8cf 	bl	8000840 <__aeabi_dcmpeq>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d1f4      	bne.n	8004690 <__ieee754_rem_pio2+0x3a0>
 80046a6:	4b0f      	ldr	r3, [pc, #60]	@ (80046e4 <__ieee754_rem_pio2+0x3f4>)
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	2302      	movs	r3, #2
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	462a      	mov	r2, r5
 80046b0:	4653      	mov	r3, sl
 80046b2:	4621      	mov	r1, r4
 80046b4:	a806      	add	r0, sp, #24
 80046b6:	f000 f81f 	bl	80046f8 <__kernel_rem_pio2>
 80046ba:	9b04      	ldr	r3, [sp, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	4605      	mov	r5, r0
 80046c0:	f6bf ae53 	bge.w	800436a <__ieee754_rem_pio2+0x7a>
 80046c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80046c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80046cc:	e9c4 2300 	strd	r2, r3, [r4]
 80046d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80046d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80046d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80046dc:	e740      	b.n	8004560 <__ieee754_rem_pio2+0x270>
 80046de:	bf00      	nop
 80046e0:	41700000 	.word	0x41700000
 80046e4:	08005070 	.word	0x08005070

080046e8 <fabs>:
 80046e8:	ec51 0b10 	vmov	r0, r1, d0
 80046ec:	4602      	mov	r2, r0
 80046ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80046f2:	ec43 2b10 	vmov	d0, r2, r3
 80046f6:	4770      	bx	lr

080046f8 <__kernel_rem_pio2>:
 80046f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fc:	ed2d 8b02 	vpush	{d8}
 8004700:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004704:	f112 0f14 	cmn.w	r2, #20
 8004708:	9306      	str	r3, [sp, #24]
 800470a:	9104      	str	r1, [sp, #16]
 800470c:	4bbe      	ldr	r3, [pc, #760]	@ (8004a08 <__kernel_rem_pio2+0x310>)
 800470e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004710:	9008      	str	r0, [sp, #32]
 8004712:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	9b06      	ldr	r3, [sp, #24]
 800471a:	f103 33ff 	add.w	r3, r3, #4294967295
 800471e:	bfa8      	it	ge
 8004720:	1ed4      	subge	r4, r2, #3
 8004722:	9305      	str	r3, [sp, #20]
 8004724:	bfb2      	itee	lt
 8004726:	2400      	movlt	r4, #0
 8004728:	2318      	movge	r3, #24
 800472a:	fb94 f4f3 	sdivge	r4, r4, r3
 800472e:	f06f 0317 	mvn.w	r3, #23
 8004732:	fb04 3303 	mla	r3, r4, r3, r3
 8004736:	eb03 0b02 	add.w	fp, r3, r2
 800473a:	9b00      	ldr	r3, [sp, #0]
 800473c:	9a05      	ldr	r2, [sp, #20]
 800473e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80049f8 <__kernel_rem_pio2+0x300>
 8004742:	eb03 0802 	add.w	r8, r3, r2
 8004746:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004748:	1aa7      	subs	r7, r4, r2
 800474a:	ae20      	add	r6, sp, #128	@ 0x80
 800474c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004750:	2500      	movs	r5, #0
 8004752:	4545      	cmp	r5, r8
 8004754:	dd13      	ble.n	800477e <__kernel_rem_pio2+0x86>
 8004756:	9b06      	ldr	r3, [sp, #24]
 8004758:	aa20      	add	r2, sp, #128	@ 0x80
 800475a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800475e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8004762:	f04f 0800 	mov.w	r8, #0
 8004766:	9b00      	ldr	r3, [sp, #0]
 8004768:	4598      	cmp	r8, r3
 800476a:	dc31      	bgt.n	80047d0 <__kernel_rem_pio2+0xd8>
 800476c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80049f8 <__kernel_rem_pio2+0x300>
 8004770:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004774:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004778:	462f      	mov	r7, r5
 800477a:	2600      	movs	r6, #0
 800477c:	e01b      	b.n	80047b6 <__kernel_rem_pio2+0xbe>
 800477e:	42ef      	cmn	r7, r5
 8004780:	d407      	bmi.n	8004792 <__kernel_rem_pio2+0x9a>
 8004782:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004786:	f7fb ff9b 	bl	80006c0 <__aeabi_i2d>
 800478a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800478e:	3501      	adds	r5, #1
 8004790:	e7df      	b.n	8004752 <__kernel_rem_pio2+0x5a>
 8004792:	ec51 0b18 	vmov	r0, r1, d8
 8004796:	e7f8      	b.n	800478a <__kernel_rem_pio2+0x92>
 8004798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800479c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80047a0:	f7fb fd12 	bl	80001c8 <__aeabi_dmul>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ac:	f7fb fe3c 	bl	8000428 <__adddf3>
 80047b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047b4:	3601      	adds	r6, #1
 80047b6:	9b05      	ldr	r3, [sp, #20]
 80047b8:	429e      	cmp	r6, r3
 80047ba:	f1a7 0708 	sub.w	r7, r7, #8
 80047be:	ddeb      	ble.n	8004798 <__kernel_rem_pio2+0xa0>
 80047c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80047c4:	f108 0801 	add.w	r8, r8, #1
 80047c8:	ecaa 7b02 	vstmia	sl!, {d7}
 80047cc:	3508      	adds	r5, #8
 80047ce:	e7ca      	b.n	8004766 <__kernel_rem_pio2+0x6e>
 80047d0:	9b00      	ldr	r3, [sp, #0]
 80047d2:	f8dd 8000 	ldr.w	r8, [sp]
 80047d6:	aa0c      	add	r2, sp, #48	@ 0x30
 80047d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80047dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80047de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80047e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80047e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80047e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80047ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047ec:	ab98      	add	r3, sp, #608	@ 0x260
 80047ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80047f2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80047f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80047fa:	ac0c      	add	r4, sp, #48	@ 0x30
 80047fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80047fe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8004802:	46a1      	mov	r9, r4
 8004804:	46c2      	mov	sl, r8
 8004806:	f1ba 0f00 	cmp.w	sl, #0
 800480a:	f1a5 0508 	sub.w	r5, r5, #8
 800480e:	dc77      	bgt.n	8004900 <__kernel_rem_pio2+0x208>
 8004810:	4658      	mov	r0, fp
 8004812:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004816:	f000 fac7 	bl	8004da8 <scalbn>
 800481a:	ec57 6b10 	vmov	r6, r7, d0
 800481e:	2200      	movs	r2, #0
 8004820:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004824:	4630      	mov	r0, r6
 8004826:	4639      	mov	r1, r7
 8004828:	f7fb fcce 	bl	80001c8 <__aeabi_dmul>
 800482c:	ec41 0b10 	vmov	d0, r0, r1
 8004830:	f000 fb3a 	bl	8004ea8 <floor>
 8004834:	4b75      	ldr	r3, [pc, #468]	@ (8004a0c <__kernel_rem_pio2+0x314>)
 8004836:	ec51 0b10 	vmov	r0, r1, d0
 800483a:	2200      	movs	r2, #0
 800483c:	f7fb fcc4 	bl	80001c8 <__aeabi_dmul>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4630      	mov	r0, r6
 8004846:	4639      	mov	r1, r7
 8004848:	f7fb fdec 	bl	8000424 <__aeabi_dsub>
 800484c:	460f      	mov	r7, r1
 800484e:	4606      	mov	r6, r0
 8004850:	f7fc f828 	bl	80008a4 <__aeabi_d2iz>
 8004854:	9002      	str	r0, [sp, #8]
 8004856:	f7fb ff33 	bl	80006c0 <__aeabi_i2d>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4630      	mov	r0, r6
 8004860:	4639      	mov	r1, r7
 8004862:	f7fb fddf 	bl	8000424 <__aeabi_dsub>
 8004866:	f1bb 0f00 	cmp.w	fp, #0
 800486a:	4606      	mov	r6, r0
 800486c:	460f      	mov	r7, r1
 800486e:	dd6c      	ble.n	800494a <__kernel_rem_pio2+0x252>
 8004870:	f108 31ff 	add.w	r1, r8, #4294967295
 8004874:	ab0c      	add	r3, sp, #48	@ 0x30
 8004876:	9d02      	ldr	r5, [sp, #8]
 8004878:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800487c:	f1cb 0018 	rsb	r0, fp, #24
 8004880:	fa43 f200 	asr.w	r2, r3, r0
 8004884:	4415      	add	r5, r2
 8004886:	4082      	lsls	r2, r0
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	aa0c      	add	r2, sp, #48	@ 0x30
 800488c:	9502      	str	r5, [sp, #8]
 800488e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004892:	f1cb 0217 	rsb	r2, fp, #23
 8004896:	fa43 f902 	asr.w	r9, r3, r2
 800489a:	f1b9 0f00 	cmp.w	r9, #0
 800489e:	dd64      	ble.n	800496a <__kernel_rem_pio2+0x272>
 80048a0:	9b02      	ldr	r3, [sp, #8]
 80048a2:	2200      	movs	r2, #0
 80048a4:	3301      	adds	r3, #1
 80048a6:	9302      	str	r3, [sp, #8]
 80048a8:	4615      	mov	r5, r2
 80048aa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80048ae:	4590      	cmp	r8, r2
 80048b0:	f300 80b8 	bgt.w	8004a24 <__kernel_rem_pio2+0x32c>
 80048b4:	f1bb 0f00 	cmp.w	fp, #0
 80048b8:	dd07      	ble.n	80048ca <__kernel_rem_pio2+0x1d2>
 80048ba:	f1bb 0f01 	cmp.w	fp, #1
 80048be:	f000 80bf 	beq.w	8004a40 <__kernel_rem_pio2+0x348>
 80048c2:	f1bb 0f02 	cmp.w	fp, #2
 80048c6:	f000 80c6 	beq.w	8004a56 <__kernel_rem_pio2+0x35e>
 80048ca:	f1b9 0f02 	cmp.w	r9, #2
 80048ce:	d14c      	bne.n	800496a <__kernel_rem_pio2+0x272>
 80048d0:	4632      	mov	r2, r6
 80048d2:	463b      	mov	r3, r7
 80048d4:	494e      	ldr	r1, [pc, #312]	@ (8004a10 <__kernel_rem_pio2+0x318>)
 80048d6:	2000      	movs	r0, #0
 80048d8:	f7fb fda4 	bl	8000424 <__aeabi_dsub>
 80048dc:	4606      	mov	r6, r0
 80048de:	460f      	mov	r7, r1
 80048e0:	2d00      	cmp	r5, #0
 80048e2:	d042      	beq.n	800496a <__kernel_rem_pio2+0x272>
 80048e4:	4658      	mov	r0, fp
 80048e6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8004a00 <__kernel_rem_pio2+0x308>
 80048ea:	f000 fa5d 	bl	8004da8 <scalbn>
 80048ee:	4630      	mov	r0, r6
 80048f0:	4639      	mov	r1, r7
 80048f2:	ec53 2b10 	vmov	r2, r3, d0
 80048f6:	f7fb fd95 	bl	8000424 <__aeabi_dsub>
 80048fa:	4606      	mov	r6, r0
 80048fc:	460f      	mov	r7, r1
 80048fe:	e034      	b.n	800496a <__kernel_rem_pio2+0x272>
 8004900:	4b44      	ldr	r3, [pc, #272]	@ (8004a14 <__kernel_rem_pio2+0x31c>)
 8004902:	2200      	movs	r2, #0
 8004904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004908:	f7fb fc5e 	bl	80001c8 <__aeabi_dmul>
 800490c:	f7fb ffca 	bl	80008a4 <__aeabi_d2iz>
 8004910:	f7fb fed6 	bl	80006c0 <__aeabi_i2d>
 8004914:	4b40      	ldr	r3, [pc, #256]	@ (8004a18 <__kernel_rem_pio2+0x320>)
 8004916:	2200      	movs	r2, #0
 8004918:	4606      	mov	r6, r0
 800491a:	460f      	mov	r7, r1
 800491c:	f7fb fc54 	bl	80001c8 <__aeabi_dmul>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004928:	f7fb fd7c 	bl	8000424 <__aeabi_dsub>
 800492c:	f7fb ffba 	bl	80008a4 <__aeabi_d2iz>
 8004930:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004934:	f849 0b04 	str.w	r0, [r9], #4
 8004938:	4639      	mov	r1, r7
 800493a:	4630      	mov	r0, r6
 800493c:	f7fb fd74 	bl	8000428 <__adddf3>
 8004940:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004948:	e75d      	b.n	8004806 <__kernel_rem_pio2+0x10e>
 800494a:	d107      	bne.n	800495c <__kernel_rem_pio2+0x264>
 800494c:	f108 33ff 	add.w	r3, r8, #4294967295
 8004950:	aa0c      	add	r2, sp, #48	@ 0x30
 8004952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004956:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800495a:	e79e      	b.n	800489a <__kernel_rem_pio2+0x1a2>
 800495c:	4b2f      	ldr	r3, [pc, #188]	@ (8004a1c <__kernel_rem_pio2+0x324>)
 800495e:	2200      	movs	r2, #0
 8004960:	f7fb ff8c 	bl	800087c <__aeabi_dcmpge>
 8004964:	2800      	cmp	r0, #0
 8004966:	d143      	bne.n	80049f0 <__kernel_rem_pio2+0x2f8>
 8004968:	4681      	mov	r9, r0
 800496a:	2200      	movs	r2, #0
 800496c:	2300      	movs	r3, #0
 800496e:	4630      	mov	r0, r6
 8004970:	4639      	mov	r1, r7
 8004972:	f7fb ff65 	bl	8000840 <__aeabi_dcmpeq>
 8004976:	2800      	cmp	r0, #0
 8004978:	f000 80bf 	beq.w	8004afa <__kernel_rem_pio2+0x402>
 800497c:	f108 33ff 	add.w	r3, r8, #4294967295
 8004980:	2200      	movs	r2, #0
 8004982:	9900      	ldr	r1, [sp, #0]
 8004984:	428b      	cmp	r3, r1
 8004986:	da6e      	bge.n	8004a66 <__kernel_rem_pio2+0x36e>
 8004988:	2a00      	cmp	r2, #0
 800498a:	f000 8089 	beq.w	8004aa0 <__kernel_rem_pio2+0x3a8>
 800498e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004992:	ab0c      	add	r3, sp, #48	@ 0x30
 8004994:	f1ab 0b18 	sub.w	fp, fp, #24
 8004998:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f6      	beq.n	800498e <__kernel_rem_pio2+0x296>
 80049a0:	4658      	mov	r0, fp
 80049a2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004a00 <__kernel_rem_pio2+0x308>
 80049a6:	f000 f9ff 	bl	8004da8 <scalbn>
 80049aa:	f108 0301 	add.w	r3, r8, #1
 80049ae:	00da      	lsls	r2, r3, #3
 80049b0:	9205      	str	r2, [sp, #20]
 80049b2:	ec55 4b10 	vmov	r4, r5, d0
 80049b6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80049b8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8004a14 <__kernel_rem_pio2+0x31c>
 80049bc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80049c0:	4646      	mov	r6, r8
 80049c2:	f04f 0a00 	mov.w	sl, #0
 80049c6:	2e00      	cmp	r6, #0
 80049c8:	f280 80cf 	bge.w	8004b6a <__kernel_rem_pio2+0x472>
 80049cc:	4644      	mov	r4, r8
 80049ce:	2c00      	cmp	r4, #0
 80049d0:	f2c0 80fd 	blt.w	8004bce <__kernel_rem_pio2+0x4d6>
 80049d4:	4b12      	ldr	r3, [pc, #72]	@ (8004a20 <__kernel_rem_pio2+0x328>)
 80049d6:	461f      	mov	r7, r3
 80049d8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80049da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049de:	9306      	str	r3, [sp, #24]
 80049e0:	f04f 0a00 	mov.w	sl, #0
 80049e4:	f04f 0b00 	mov.w	fp, #0
 80049e8:	2600      	movs	r6, #0
 80049ea:	eba8 0504 	sub.w	r5, r8, r4
 80049ee:	e0e2      	b.n	8004bb6 <__kernel_rem_pio2+0x4be>
 80049f0:	f04f 0902 	mov.w	r9, #2
 80049f4:	e754      	b.n	80048a0 <__kernel_rem_pio2+0x1a8>
 80049f6:	bf00      	nop
	...
 8004a04:	3ff00000 	.word	0x3ff00000
 8004a08:	080051b8 	.word	0x080051b8
 8004a0c:	40200000 	.word	0x40200000
 8004a10:	3ff00000 	.word	0x3ff00000
 8004a14:	3e700000 	.word	0x3e700000
 8004a18:	41700000 	.word	0x41700000
 8004a1c:	3fe00000 	.word	0x3fe00000
 8004a20:	08005178 	.word	0x08005178
 8004a24:	f854 3b04 	ldr.w	r3, [r4], #4
 8004a28:	b945      	cbnz	r5, 8004a3c <__kernel_rem_pio2+0x344>
 8004a2a:	b123      	cbz	r3, 8004a36 <__kernel_rem_pio2+0x33e>
 8004a2c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004a30:	f844 3c04 	str.w	r3, [r4, #-4]
 8004a34:	2301      	movs	r3, #1
 8004a36:	3201      	adds	r2, #1
 8004a38:	461d      	mov	r5, r3
 8004a3a:	e738      	b.n	80048ae <__kernel_rem_pio2+0x1b6>
 8004a3c:	1acb      	subs	r3, r1, r3
 8004a3e:	e7f7      	b.n	8004a30 <__kernel_rem_pio2+0x338>
 8004a40:	f108 32ff 	add.w	r2, r8, #4294967295
 8004a44:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004a4e:	a90c      	add	r1, sp, #48	@ 0x30
 8004a50:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004a54:	e739      	b.n	80048ca <__kernel_rem_pio2+0x1d2>
 8004a56:	f108 32ff 	add.w	r2, r8, #4294967295
 8004a5a:	ab0c      	add	r3, sp, #48	@ 0x30
 8004a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a60:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004a64:	e7f3      	b.n	8004a4e <__kernel_rem_pio2+0x356>
 8004a66:	a90c      	add	r1, sp, #48	@ 0x30
 8004a68:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	e787      	b.n	8004982 <__kernel_rem_pio2+0x28a>
 8004a72:	3401      	adds	r4, #1
 8004a74:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	d0fa      	beq.n	8004a72 <__kernel_rem_pio2+0x37a>
 8004a7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a7e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004a82:	eb0d 0503 	add.w	r5, sp, r3
 8004a86:	9b06      	ldr	r3, [sp, #24]
 8004a88:	aa20      	add	r2, sp, #128	@ 0x80
 8004a8a:	4443      	add	r3, r8
 8004a8c:	f108 0701 	add.w	r7, r8, #1
 8004a90:	3d98      	subs	r5, #152	@ 0x98
 8004a92:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004a96:	4444      	add	r4, r8
 8004a98:	42bc      	cmp	r4, r7
 8004a9a:	da04      	bge.n	8004aa6 <__kernel_rem_pio2+0x3ae>
 8004a9c:	46a0      	mov	r8, r4
 8004a9e:	e6a2      	b.n	80047e6 <__kernel_rem_pio2+0xee>
 8004aa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004aa2:	2401      	movs	r4, #1
 8004aa4:	e7e6      	b.n	8004a74 <__kernel_rem_pio2+0x37c>
 8004aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aa8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004aac:	f7fb fe08 	bl	80006c0 <__aeabi_i2d>
 8004ab0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004d78 <__kernel_rem_pio2+0x680>
 8004ab4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004ab8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004abc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ac0:	46b2      	mov	sl, r6
 8004ac2:	f04f 0800 	mov.w	r8, #0
 8004ac6:	9b05      	ldr	r3, [sp, #20]
 8004ac8:	4598      	cmp	r8, r3
 8004aca:	dd05      	ble.n	8004ad8 <__kernel_rem_pio2+0x3e0>
 8004acc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ad0:	3701      	adds	r7, #1
 8004ad2:	eca5 7b02 	vstmia	r5!, {d7}
 8004ad6:	e7df      	b.n	8004a98 <__kernel_rem_pio2+0x3a0>
 8004ad8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8004adc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004ae0:	f7fb fb72 	bl	80001c8 <__aeabi_dmul>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aec:	f7fb fc9c 	bl	8000428 <__adddf3>
 8004af0:	f108 0801 	add.w	r8, r8, #1
 8004af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004af8:	e7e5      	b.n	8004ac6 <__kernel_rem_pio2+0x3ce>
 8004afa:	f1cb 0000 	rsb	r0, fp, #0
 8004afe:	ec47 6b10 	vmov	d0, r6, r7
 8004b02:	f000 f951 	bl	8004da8 <scalbn>
 8004b06:	ec55 4b10 	vmov	r4, r5, d0
 8004b0a:	4b9d      	ldr	r3, [pc, #628]	@ (8004d80 <__kernel_rem_pio2+0x688>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4620      	mov	r0, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	f7fb feb3 	bl	800087c <__aeabi_dcmpge>
 8004b16:	b300      	cbz	r0, 8004b5a <__kernel_rem_pio2+0x462>
 8004b18:	4b9a      	ldr	r3, [pc, #616]	@ (8004d84 <__kernel_rem_pio2+0x68c>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	4629      	mov	r1, r5
 8004b20:	f7fb fb52 	bl	80001c8 <__aeabi_dmul>
 8004b24:	f7fb febe 	bl	80008a4 <__aeabi_d2iz>
 8004b28:	4606      	mov	r6, r0
 8004b2a:	f7fb fdc9 	bl	80006c0 <__aeabi_i2d>
 8004b2e:	4b94      	ldr	r3, [pc, #592]	@ (8004d80 <__kernel_rem_pio2+0x688>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	f7fb fb49 	bl	80001c8 <__aeabi_dmul>
 8004b36:	460b      	mov	r3, r1
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f7fb fc71 	bl	8000424 <__aeabi_dsub>
 8004b42:	f7fb feaf 	bl	80008a4 <__aeabi_d2iz>
 8004b46:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b48:	f10b 0b18 	add.w	fp, fp, #24
 8004b4c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004b50:	f108 0801 	add.w	r8, r8, #1
 8004b54:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004b58:	e722      	b.n	80049a0 <__kernel_rem_pio2+0x2a8>
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	f7fb fea1 	bl	80008a4 <__aeabi_d2iz>
 8004b62:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004b68:	e71a      	b.n	80049a0 <__kernel_rem_pio2+0x2a8>
 8004b6a:	ab0c      	add	r3, sp, #48	@ 0x30
 8004b6c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004b70:	f7fb fda6 	bl	80006c0 <__aeabi_i2d>
 8004b74:	4622      	mov	r2, r4
 8004b76:	462b      	mov	r3, r5
 8004b78:	f7fb fb26 	bl	80001c8 <__aeabi_dmul>
 8004b7c:	4652      	mov	r2, sl
 8004b7e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004b82:	465b      	mov	r3, fp
 8004b84:	4620      	mov	r0, r4
 8004b86:	4629      	mov	r1, r5
 8004b88:	f7fb fb1e 	bl	80001c8 <__aeabi_dmul>
 8004b8c:	3e01      	subs	r6, #1
 8004b8e:	4604      	mov	r4, r0
 8004b90:	460d      	mov	r5, r1
 8004b92:	e718      	b.n	80049c6 <__kernel_rem_pio2+0x2ce>
 8004b94:	9906      	ldr	r1, [sp, #24]
 8004b96:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004b9a:	9106      	str	r1, [sp, #24]
 8004b9c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004ba0:	f7fb fb12 	bl	80001c8 <__aeabi_dmul>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4650      	mov	r0, sl
 8004baa:	4659      	mov	r1, fp
 8004bac:	f7fb fc3c 	bl	8000428 <__adddf3>
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	4682      	mov	sl, r0
 8004bb4:	468b      	mov	fp, r1
 8004bb6:	9b00      	ldr	r3, [sp, #0]
 8004bb8:	429e      	cmp	r6, r3
 8004bba:	dc01      	bgt.n	8004bc0 <__kernel_rem_pio2+0x4c8>
 8004bbc:	42b5      	cmp	r5, r6
 8004bbe:	dae9      	bge.n	8004b94 <__kernel_rem_pio2+0x49c>
 8004bc0:	ab48      	add	r3, sp, #288	@ 0x120
 8004bc2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004bc6:	e9c5 ab00 	strd	sl, fp, [r5]
 8004bca:	3c01      	subs	r4, #1
 8004bcc:	e6ff      	b.n	80049ce <__kernel_rem_pio2+0x2d6>
 8004bce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	dc0b      	bgt.n	8004bec <__kernel_rem_pio2+0x4f4>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	dc39      	bgt.n	8004c4c <__kernel_rem_pio2+0x554>
 8004bd8:	d05d      	beq.n	8004c96 <__kernel_rem_pio2+0x59e>
 8004bda:	9b02      	ldr	r3, [sp, #8]
 8004bdc:	f003 0007 	and.w	r0, r3, #7
 8004be0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004be4:	ecbd 8b02 	vpop	{d8}
 8004be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d1f3      	bne.n	8004bda <__kernel_rem_pio2+0x4e2>
 8004bf2:	9b05      	ldr	r3, [sp, #20]
 8004bf4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004bf8:	eb0d 0403 	add.w	r4, sp, r3
 8004bfc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8004c00:	4625      	mov	r5, r4
 8004c02:	46c2      	mov	sl, r8
 8004c04:	f1ba 0f00 	cmp.w	sl, #0
 8004c08:	f1a5 0508 	sub.w	r5, r5, #8
 8004c0c:	dc6b      	bgt.n	8004ce6 <__kernel_rem_pio2+0x5ee>
 8004c0e:	4645      	mov	r5, r8
 8004c10:	2d01      	cmp	r5, #1
 8004c12:	f1a4 0408 	sub.w	r4, r4, #8
 8004c16:	f300 8087 	bgt.w	8004d28 <__kernel_rem_pio2+0x630>
 8004c1a:	9c05      	ldr	r4, [sp, #20]
 8004c1c:	ab48      	add	r3, sp, #288	@ 0x120
 8004c1e:	441c      	add	r4, r3
 8004c20:	2000      	movs	r0, #0
 8004c22:	2100      	movs	r1, #0
 8004c24:	f1b8 0f01 	cmp.w	r8, #1
 8004c28:	f300 809c 	bgt.w	8004d64 <__kernel_rem_pio2+0x66c>
 8004c2c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004c30:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004c34:	f1b9 0f00 	cmp.w	r9, #0
 8004c38:	f040 80a6 	bne.w	8004d88 <__kernel_rem_pio2+0x690>
 8004c3c:	9b04      	ldr	r3, [sp, #16]
 8004c3e:	e9c3 7800 	strd	r7, r8, [r3]
 8004c42:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004c46:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004c4a:	e7c6      	b.n	8004bda <__kernel_rem_pio2+0x4e2>
 8004c4c:	9d05      	ldr	r5, [sp, #20]
 8004c4e:	ab48      	add	r3, sp, #288	@ 0x120
 8004c50:	441d      	add	r5, r3
 8004c52:	4644      	mov	r4, r8
 8004c54:	2000      	movs	r0, #0
 8004c56:	2100      	movs	r1, #0
 8004c58:	2c00      	cmp	r4, #0
 8004c5a:	da35      	bge.n	8004cc8 <__kernel_rem_pio2+0x5d0>
 8004c5c:	f1b9 0f00 	cmp.w	r9, #0
 8004c60:	d038      	beq.n	8004cd4 <__kernel_rem_pio2+0x5dc>
 8004c62:	4602      	mov	r2, r0
 8004c64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004c68:	9c04      	ldr	r4, [sp, #16]
 8004c6a:	e9c4 2300 	strd	r2, r3, [r4]
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004c76:	f7fb fbd5 	bl	8000424 <__aeabi_dsub>
 8004c7a:	ad4a      	add	r5, sp, #296	@ 0x128
 8004c7c:	2401      	movs	r4, #1
 8004c7e:	45a0      	cmp	r8, r4
 8004c80:	da2b      	bge.n	8004cda <__kernel_rem_pio2+0x5e2>
 8004c82:	f1b9 0f00 	cmp.w	r9, #0
 8004c86:	d002      	beq.n	8004c8e <__kernel_rem_pio2+0x596>
 8004c88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	9b04      	ldr	r3, [sp, #16]
 8004c90:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004c94:	e7a1      	b.n	8004bda <__kernel_rem_pio2+0x4e2>
 8004c96:	9c05      	ldr	r4, [sp, #20]
 8004c98:	ab48      	add	r3, sp, #288	@ 0x120
 8004c9a:	441c      	add	r4, r3
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	f1b8 0f00 	cmp.w	r8, #0
 8004ca4:	da09      	bge.n	8004cba <__kernel_rem_pio2+0x5c2>
 8004ca6:	f1b9 0f00 	cmp.w	r9, #0
 8004caa:	d002      	beq.n	8004cb2 <__kernel_rem_pio2+0x5ba>
 8004cac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	9b04      	ldr	r3, [sp, #16]
 8004cb4:	e9c3 0100 	strd	r0, r1, [r3]
 8004cb8:	e78f      	b.n	8004bda <__kernel_rem_pio2+0x4e2>
 8004cba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004cbe:	f7fb fbb3 	bl	8000428 <__adddf3>
 8004cc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cc6:	e7eb      	b.n	8004ca0 <__kernel_rem_pio2+0x5a8>
 8004cc8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004ccc:	f7fb fbac 	bl	8000428 <__adddf3>
 8004cd0:	3c01      	subs	r4, #1
 8004cd2:	e7c1      	b.n	8004c58 <__kernel_rem_pio2+0x560>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	e7c6      	b.n	8004c68 <__kernel_rem_pio2+0x570>
 8004cda:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8004cde:	f7fb fba3 	bl	8000428 <__adddf3>
 8004ce2:	3401      	adds	r4, #1
 8004ce4:	e7cb      	b.n	8004c7e <__kernel_rem_pio2+0x586>
 8004ce6:	ed95 7b00 	vldr	d7, [r5]
 8004cea:	ed8d 7b00 	vstr	d7, [sp]
 8004cee:	ed95 7b02 	vldr	d7, [r5, #8]
 8004cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cf6:	ec53 2b17 	vmov	r2, r3, d7
 8004cfa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004cfe:	f7fb fb93 	bl	8000428 <__adddf3>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4606      	mov	r6, r0
 8004d08:	460f      	mov	r7, r1
 8004d0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d0e:	f7fb fb89 	bl	8000424 <__aeabi_dsub>
 8004d12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d16:	f7fb fb87 	bl	8000428 <__adddf3>
 8004d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d1e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004d22:	e9c5 6700 	strd	r6, r7, [r5]
 8004d26:	e76d      	b.n	8004c04 <__kernel_rem_pio2+0x50c>
 8004d28:	ed94 7b00 	vldr	d7, [r4]
 8004d2c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004d30:	ec51 0b17 	vmov	r0, r1, d7
 8004d34:	4652      	mov	r2, sl
 8004d36:	465b      	mov	r3, fp
 8004d38:	ed8d 7b00 	vstr	d7, [sp]
 8004d3c:	f7fb fb74 	bl	8000428 <__adddf3>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4606      	mov	r6, r0
 8004d46:	460f      	mov	r7, r1
 8004d48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d4c:	f7fb fb6a 	bl	8000424 <__aeabi_dsub>
 8004d50:	4652      	mov	r2, sl
 8004d52:	465b      	mov	r3, fp
 8004d54:	f7fb fb68 	bl	8000428 <__adddf3>
 8004d58:	3d01      	subs	r5, #1
 8004d5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d5e:	e9c4 6700 	strd	r6, r7, [r4]
 8004d62:	e755      	b.n	8004c10 <__kernel_rem_pio2+0x518>
 8004d64:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004d68:	f7fb fb5e 	bl	8000428 <__adddf3>
 8004d6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d70:	e758      	b.n	8004c24 <__kernel_rem_pio2+0x52c>
 8004d72:	bf00      	nop
 8004d74:	f3af 8000 	nop.w
	...
 8004d80:	41700000 	.word	0x41700000
 8004d84:	3e700000 	.word	0x3e700000
 8004d88:	9b04      	ldr	r3, [sp, #16]
 8004d8a:	9a04      	ldr	r2, [sp, #16]
 8004d8c:	601f      	str	r7, [r3, #0]
 8004d8e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8004d92:	605c      	str	r4, [r3, #4]
 8004d94:	609d      	str	r5, [r3, #8]
 8004d96:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004d9a:	60d3      	str	r3, [r2, #12]
 8004d9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004da0:	6110      	str	r0, [r2, #16]
 8004da2:	6153      	str	r3, [r2, #20]
 8004da4:	e719      	b.n	8004bda <__kernel_rem_pio2+0x4e2>
 8004da6:	bf00      	nop

08004da8 <scalbn>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	ec55 4b10 	vmov	r4, r5, d0
 8004dae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004db2:	4606      	mov	r6, r0
 8004db4:	462b      	mov	r3, r5
 8004db6:	b991      	cbnz	r1, 8004dde <scalbn+0x36>
 8004db8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004dbc:	4323      	orrs	r3, r4
 8004dbe:	d03d      	beq.n	8004e3c <scalbn+0x94>
 8004dc0:	4b35      	ldr	r3, [pc, #212]	@ (8004e98 <scalbn+0xf0>)
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f7fb f9fe 	bl	80001c8 <__aeabi_dmul>
 8004dcc:	4b33      	ldr	r3, [pc, #204]	@ (8004e9c <scalbn+0xf4>)
 8004dce:	429e      	cmp	r6, r3
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	460d      	mov	r5, r1
 8004dd4:	da0f      	bge.n	8004df6 <scalbn+0x4e>
 8004dd6:	a328      	add	r3, pc, #160	@ (adr r3, 8004e78 <scalbn+0xd0>)
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	e01e      	b.n	8004e1c <scalbn+0x74>
 8004dde:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004de2:	4291      	cmp	r1, r2
 8004de4:	d10b      	bne.n	8004dfe <scalbn+0x56>
 8004de6:	4622      	mov	r2, r4
 8004de8:	4620      	mov	r0, r4
 8004dea:	4629      	mov	r1, r5
 8004dec:	f7fb fb1c 	bl	8000428 <__adddf3>
 8004df0:	4604      	mov	r4, r0
 8004df2:	460d      	mov	r5, r1
 8004df4:	e022      	b.n	8004e3c <scalbn+0x94>
 8004df6:	460b      	mov	r3, r1
 8004df8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004dfc:	3936      	subs	r1, #54	@ 0x36
 8004dfe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004e02:	4296      	cmp	r6, r2
 8004e04:	dd0d      	ble.n	8004e22 <scalbn+0x7a>
 8004e06:	2d00      	cmp	r5, #0
 8004e08:	a11d      	add	r1, pc, #116	@ (adr r1, 8004e80 <scalbn+0xd8>)
 8004e0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e0e:	da02      	bge.n	8004e16 <scalbn+0x6e>
 8004e10:	a11d      	add	r1, pc, #116	@ (adr r1, 8004e88 <scalbn+0xe0>)
 8004e12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e16:	a31a      	add	r3, pc, #104	@ (adr r3, 8004e80 <scalbn+0xd8>)
 8004e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1c:	f7fb f9d4 	bl	80001c8 <__aeabi_dmul>
 8004e20:	e7e6      	b.n	8004df0 <scalbn+0x48>
 8004e22:	1872      	adds	r2, r6, r1
 8004e24:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004e28:	428a      	cmp	r2, r1
 8004e2a:	dcec      	bgt.n	8004e06 <scalbn+0x5e>
 8004e2c:	2a00      	cmp	r2, #0
 8004e2e:	dd08      	ble.n	8004e42 <scalbn+0x9a>
 8004e30:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004e34:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004e38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004e3c:	ec45 4b10 	vmov	d0, r4, r5
 8004e40:	bd70      	pop	{r4, r5, r6, pc}
 8004e42:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004e46:	da08      	bge.n	8004e5a <scalbn+0xb2>
 8004e48:	2d00      	cmp	r5, #0
 8004e4a:	a10b      	add	r1, pc, #44	@ (adr r1, 8004e78 <scalbn+0xd0>)
 8004e4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e50:	dac1      	bge.n	8004dd6 <scalbn+0x2e>
 8004e52:	a10f      	add	r1, pc, #60	@ (adr r1, 8004e90 <scalbn+0xe8>)
 8004e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e58:	e7bd      	b.n	8004dd6 <scalbn+0x2e>
 8004e5a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004e5e:	3236      	adds	r2, #54	@ 0x36
 8004e60:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004e64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004e68:	4620      	mov	r0, r4
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <scalbn+0xf8>)
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	2200      	movs	r2, #0
 8004e70:	e7d4      	b.n	8004e1c <scalbn+0x74>
 8004e72:	bf00      	nop
 8004e74:	f3af 8000 	nop.w
 8004e78:	c2f8f359 	.word	0xc2f8f359
 8004e7c:	01a56e1f 	.word	0x01a56e1f
 8004e80:	8800759c 	.word	0x8800759c
 8004e84:	7e37e43c 	.word	0x7e37e43c
 8004e88:	8800759c 	.word	0x8800759c
 8004e8c:	fe37e43c 	.word	0xfe37e43c
 8004e90:	c2f8f359 	.word	0xc2f8f359
 8004e94:	81a56e1f 	.word	0x81a56e1f
 8004e98:	43500000 	.word	0x43500000
 8004e9c:	ffff3cb0 	.word	0xffff3cb0
 8004ea0:	3c900000 	.word	0x3c900000
 8004ea4:	00000000 	.word	0x00000000

08004ea8 <floor>:
 8004ea8:	ec51 0b10 	vmov	r0, r1, d0
 8004eac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004eb8:	2e13      	cmp	r6, #19
 8004eba:	460c      	mov	r4, r1
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	4680      	mov	r8, r0
 8004ec0:	dc34      	bgt.n	8004f2c <floor+0x84>
 8004ec2:	2e00      	cmp	r6, #0
 8004ec4:	da17      	bge.n	8004ef6 <floor+0x4e>
 8004ec6:	a332      	add	r3, pc, #200	@ (adr r3, 8004f90 <floor+0xe8>)
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	f7fb faac 	bl	8000428 <__adddf3>
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f7fb fcdc 	bl	8000890 <__aeabi_dcmpgt>
 8004ed8:	b150      	cbz	r0, 8004ef0 <floor+0x48>
 8004eda:	2c00      	cmp	r4, #0
 8004edc:	da55      	bge.n	8004f8a <floor+0xe2>
 8004ede:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004ee2:	432c      	orrs	r4, r5
 8004ee4:	2500      	movs	r5, #0
 8004ee6:	42ac      	cmp	r4, r5
 8004ee8:	4c2b      	ldr	r4, [pc, #172]	@ (8004f98 <floor+0xf0>)
 8004eea:	bf08      	it	eq
 8004eec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	e023      	b.n	8004f3e <floor+0x96>
 8004ef6:	4f29      	ldr	r7, [pc, #164]	@ (8004f9c <floor+0xf4>)
 8004ef8:	4137      	asrs	r7, r6
 8004efa:	ea01 0307 	and.w	r3, r1, r7
 8004efe:	4303      	orrs	r3, r0
 8004f00:	d01d      	beq.n	8004f3e <floor+0x96>
 8004f02:	a323      	add	r3, pc, #140	@ (adr r3, 8004f90 <floor+0xe8>)
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f7fb fa8e 	bl	8000428 <__adddf3>
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f7fb fcbe 	bl	8000890 <__aeabi_dcmpgt>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d0eb      	beq.n	8004ef0 <floor+0x48>
 8004f18:	2c00      	cmp	r4, #0
 8004f1a:	bfbe      	ittt	lt
 8004f1c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004f20:	4133      	asrlt	r3, r6
 8004f22:	18e4      	addlt	r4, r4, r3
 8004f24:	ea24 0407 	bic.w	r4, r4, r7
 8004f28:	2500      	movs	r5, #0
 8004f2a:	e7e1      	b.n	8004ef0 <floor+0x48>
 8004f2c:	2e33      	cmp	r6, #51	@ 0x33
 8004f2e:	dd0a      	ble.n	8004f46 <floor+0x9e>
 8004f30:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004f34:	d103      	bne.n	8004f3e <floor+0x96>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	f7fb fa75 	bl	8000428 <__adddf3>
 8004f3e:	ec41 0b10 	vmov	d0, r0, r1
 8004f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f46:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004f4a:	f04f 37ff 	mov.w	r7, #4294967295
 8004f4e:	40df      	lsrs	r7, r3
 8004f50:	4207      	tst	r7, r0
 8004f52:	d0f4      	beq.n	8004f3e <floor+0x96>
 8004f54:	a30e      	add	r3, pc, #56	@ (adr r3, 8004f90 <floor+0xe8>)
 8004f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5a:	f7fb fa65 	bl	8000428 <__adddf3>
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2300      	movs	r3, #0
 8004f62:	f7fb fc95 	bl	8000890 <__aeabi_dcmpgt>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d0c2      	beq.n	8004ef0 <floor+0x48>
 8004f6a:	2c00      	cmp	r4, #0
 8004f6c:	da0a      	bge.n	8004f84 <floor+0xdc>
 8004f6e:	2e14      	cmp	r6, #20
 8004f70:	d101      	bne.n	8004f76 <floor+0xce>
 8004f72:	3401      	adds	r4, #1
 8004f74:	e006      	b.n	8004f84 <floor+0xdc>
 8004f76:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	40b3      	lsls	r3, r6
 8004f7e:	441d      	add	r5, r3
 8004f80:	4545      	cmp	r5, r8
 8004f82:	d3f6      	bcc.n	8004f72 <floor+0xca>
 8004f84:	ea25 0507 	bic.w	r5, r5, r7
 8004f88:	e7b2      	b.n	8004ef0 <floor+0x48>
 8004f8a:	2500      	movs	r5, #0
 8004f8c:	462c      	mov	r4, r5
 8004f8e:	e7af      	b.n	8004ef0 <floor+0x48>
 8004f90:	8800759c 	.word	0x8800759c
 8004f94:	7e37e43c 	.word	0x7e37e43c
 8004f98:	bff00000 	.word	0xbff00000
 8004f9c:	000fffff 	.word	0x000fffff

08004fa0 <_init>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	bf00      	nop
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr

08004fac <_fini>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	bf00      	nop
 8004fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb2:	bc08      	pop	{r3}
 8004fb4:	469e      	mov	lr, r3
 8004fb6:	4770      	bx	lr
